{"pageProps":{"post":{"title":"aws","slug":"aws","content":"<h1>AWS CDK (AWS Cloud Development Kit)</h1>\n<ul>\n<li>The AWS CDK (Amazon Web Services Cloud Development Kit) is a <a href=\"https://github.com/aws/aws-cdk\">new open source framework</a> to define cloud infrastructure in code (Infrastructure as Code) and provisioning it through AWS CloudFormation.</li>\n<li>CDK provides many high level components to allow rapid code development requiring much less input compared to the typical CloudFormation templates.</li>\n<li>CDK is available in TypeScript, Python, Java and C#.\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Install globally </span>\n$ <span class=\"token function\">npm</span> i -g aws-cdk\n\n$ <span class=\"token function\">mkdir</span> my-app <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token builtin class-name\">cd</span> my-app\n$ cdk init app --language<span class=\"token operator\">=</span>typescript\n\n$ <span class=\"token function\">npm</span> i @aws-cdk/aws-apigatewayv2 @aws-cdk/aws-apigatewayv2-integrations @aws-cdk/aws-ec2 @aws-cdk/aws-lambda @aws-cdk/aws-rds @aws-cdk/core source-map-support\n</code></pre></div>\n</li>\n</ul>\n<h1>Aurora DB</h1>\n<ul>\n<li>MySQL and PostgreSQL-compatible relational database built for the cloud. Performance and availability of commercial-grade databases at 1/10th the cost.</li>\n<li>Amazon Aurora is a MySQL and PostgreSQL-compatible relational database built for the cloud, that combines the performance and availability of traditional enterprise databases with the simplicity and cost-effectiveness of open source databases.</li>\n<li>Amazon Aurora is up to five times faster than standard MySQL databases and three times faster than standard PostgreSQL databases.</li>\n<li>DB normally run on an EC and it a pain to scale</li>\n<li>Aurora scale automatically,</li>\n<li>Aurora make 6 copies of your data distributes around multiple locations</li>\n<li>Continuously backs it up to S3 so your data is safe</li>\n<li>Aurora can also replicate around multiple regions</li>\n<li>It's fully managed</li>\n<li>Aurora comes in 2 flavors\n<ul>\n<li>Aurora Basic</li>\n<li>Aurora Serverless (scales as much as you need and shuts down when you don't need it)</li>\n</ul>\n</li>\n<li>Aurora uses a data API to access the data, which is different to how you normally connect to a relational database (via connections)\n<ul>\n<li>Working with Relational Database you have to connect to the DB, do your operations, then closing the connections</li>\n<li>In the world of Serverless it become a little problematic cause you can have multiple lambda functions and they will all be handling the connections independenly which can lead to problems in your database like running out of open connections, your killing the memory, making it preform really bad</li>\n<li>You can use an AWS Proxy that sits between your Database and your lambda functions and will handle the connections</li>\n<li>You should really just use this if you have legacy DB</li>\n<li>If you are building a new application, just use the Aurora Serverless and save yourself the headache</li>\n</ul>\n</li>\n<li>DynamoDB used the model of accessing the DB via the API</li>\n<li>In the serverless world dealing with DB connections is a pain,</li>\n</ul>\n<h1>PostGIS</h1>\n<ul>\n<li><a href=\"https://www.martinpeters.ie/2020/02/01/cdk-rds-postgis-setup/\"></a></li>\n</ul>\n<h1>AWS SAM (AWS Serverless Application Model)</h1>\n<ul>\n<li>SAM is an open-source framework for building serverless applications.</li>\n<li>You define the services you want in YAML and during the deployment SAM will convert it to CloudFormation syntax</li>\n<li>SAM can be installed with <code>Homebrew</code></li>\n<li>SAM allows you to run your application locally so you can test it out and debug</li>\n<li>SAM is Infrastructure as Code</li>\n</ul>\n<h2>Installing SAM on MacOS</h2>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-mac.html\">How to install SAM</a>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ brew tap aws/tap\n$ brew <span class=\"token function\">install</span> aws-sam-cli\n$ sam --version\n\n$ brew upgrade aws-sam-cli\n</code></pre></div>\n</li>\n</ul>\n<h2>Get setup</h2>\n<ul>\n<li>Start by scaffolding your application\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Step 1 - Download a sample application</span>\n$ sam init\n<span class=\"token comment\"># 1 - AWS Quick Start Templates</span>\n<span class=\"token comment\"># 1 - Zip (artifact is a zip uploaded to S3)</span>\n<span class=\"token comment\"># 1 - nodejs14.x</span>\n<span class=\"token comment\"># AWS quick start application templates:</span>\n<span class=\"token comment\">#    1 - Hello World Example</span>\n<span class=\"token comment\">#    2 - Step Functions Sample App (Stock Trader)</span>\n<span class=\"token comment\">#    3 - Quick Start: From Scratch</span>\n<span class=\"token comment\">#    4 - Quick Start: Scheduled Events</span>\n<span class=\"token comment\">#    5 - Quick Start: S3</span>\n<span class=\"token comment\">#    6 - Quick Start: SNS</span>\n<span class=\"token comment\">#    7 - Quick Start: SQS</span>\n<span class=\"token comment\">#    8 - Quick Start: Web Backend</span>\n\n<span class=\"token comment\"># Step 2 run your code locally</span>\n$ sam <span class=\"token builtin class-name\">local</span> start-api\n\n<span class=\"token comment\"># Step 3 - Build your application</span>\n$ <span class=\"token builtin class-name\">cd</span> sam-app\n$ sam build\n\n<span class=\"token comment\"># Step 4 - Deploy your application</span>\n$ sam deploy --guided\n<span class=\"token comment\"># Once everything is deployed it will print out the REST Endpoint `https://&#x3C;RANDOM_STRING>.execute-api.us-west-2.amazonaws.com/Prod/`</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Check your stuff out in AWS Console</h2>\n<ul>\n<li>You can view your SAM application in AWS Console by going to <code>Lambda</code> > <code>Applications</code>\n<img src=\"/assets/blog/aws/aws-console_serverless-application.png\" alt=\"aws-console_serverless-application\"></li>\n<li>You can view your stack my clicking the <code>CloudFormation</code></li>\n</ul>\n<h2>Check your stuff within VSCode with the <code>Serverless Console</code> extension</h2>\n<ul>\n<li>\n<p>You can use a vscode extension <a href=\"https://marketplace.visualstudio.com/items?itemName=devAdvice.serverlessconsole\">Serverless Console</a> to view all the logs</p>\n<ul>\n<li>In vscode click the lighting bolt in the quick look panel</li>\n<li>Create a connection</li>\n</ul>\n<p><img src=\"/assets/blog/aws/serverless-console_connect.png\" alt=\"serverless-console_connect\"></p>\n<p><img src=\"/assets/blog/aws/serverless-console_panel.png\" alt=\"serverless-console_panel\"></p>\n</li>\n<li>\n<p>Invoke your Lambda function directly</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ sam <span class=\"token builtin class-name\">local</span> invoke <span class=\"token string\">\"HelloWorldFunction\"</span> -e events/event.json\n</code></pre></div>\n</li>\n</ul>\n<h2>Cleanup</h2>\n<ul>\n<li>\n<p>To delete the sample application that you created, use the AWS CLI. Assuming you used your project name for the stack name, you can run the following:</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">aws cloudformation delete-stack --stack-name <span class=\"token operator\">&#x3C;</span>STACK_NAME<span class=\"token operator\">></span>\n</code></pre></div>\n</li>\n</ul>\n","ogImage":{"url":"/assets/blog/hello-world/cover.jpg"},"coverImage":"/assets/blog/hello-world/cover.jpg"}},"__N_SSG":true}