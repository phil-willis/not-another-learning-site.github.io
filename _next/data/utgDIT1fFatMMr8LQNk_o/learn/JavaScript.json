{"pageProps":{"post":{"title":"JavaScript","slug":"JavaScript","content":"<h1>Overview of JavaScript</h1>\n<ul>\n<li>Dynamic programming languages\n<ul>\n<li>Not pre-compiled</li>\n<li>Code evaluated and executed at runtime</li>\n<li>Code can change at runtime (variable types can change)</li>\n</ul>\n</li>\n<li>Weakly types programming languages\n<ul>\n<li>Data types are assumed automatically</li>\n<li>Strong types you have to define the types</li>\n</ul>\n</li>\n<li>Compiled at runtime</li>\n<li>JS was create to make webpages more dynamic</li>\n<li>JS is executed via JS engine\n<ul>\n<li>V8 (Chrome)</li>\n<li>SpiderMonkey (Firefox)</li>\n<li>the JS engine\n<ol>\n<li>Parse Code</li>\n<li>Compile to Machine code</li>\n<li>execute Machine code</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>All on an Single Thread on your operating system</li>\n<li>JS runs on a Host Environments\n<ul>\n<li>Browserside\n<ul>\n<li>can't acces local file system</li>\n<li>Runs in a sandbox</li>\n</ul>\n</li>\n<li>Serverside\n<ul>\n<li>Extracted the Chrome's V8 (JS Engine)</li>\n<li>You can run it on any machine</li>\n<li>Called Node.js</li>\n<li>You can run on the server</li>\n<li>You can run on any computer (Mac/Linux/Windows)</li>\n<li>Can't manipulate the DOM</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Brief History</h1>\n<ul>\n<li>1995 Netscape release \"LiveScript\", then renamed to JavaScript</li>\n<li>1996 Microsoft release it's own version for IE</li>\n<li>1996 ECMA to start standardization (European Computer Manufacturers Association)</li>\n<li>In 2015 JS had a huge upgrade and we now use transpiling to convert to the older JS so that it can be used in older browsers</li>\n<li>6th Edition – ECMAScript 2015</li>\n<li>7th Edition – ECMAScript 2016</li>\n<li>8th Edition – ECMAScript 2017</li>\n<li>9th Edition – ECMAScript 2018</li>\n<li>10th Edition – ECMAScript 2019</li>\n<li>11th Edition – ECMAScript 2020</li>\n<li>Each browser comes with its own JS engine that also defines wich features are actually supported</li>\n<li><a href=\"https://caniuse.com/\">caniuse</a> is a great resource to see if a feature is supported or not</li>\n<li>ECMA-Script is in active development</li>\n</ul>\n<h1>Topics</h1>\n<ul>\n<li>\n<p>var, let, Const</p>\n</li>\n<li>\n<p>Prototype</p>\n</li>\n<li>\n<p>Arrow Functions</p>\n</li>\n<li>\n<p>Primitive vs Reference types</p>\n</li>\n<li>\n<p>Array &#x26; Array methods</p>\n</li>\n<li>\n<p>Object &#x26; Object Method</p>\n</li>\n<li>\n<p>Aync &#x26; Promises</p>\n</li>\n<li>\n<p>Destructuring</p>\n</li>\n<li>\n<p>Template literals</p>\n</li>\n<li>\n<p>How the web works</p>\n</li>\n<li>\n<p>npm scripts &#x26; package.json</p>\n</li>\n<li>\n<p>husky &#x26; nvm versions</p>\n</li>\n<li>\n<p>sessions, cookies, &#x26; jwt</p>\n</li>\n<li>\n<p>OAuth</p>\n</li>\n<li>\n<p>Security</p>\n<ul>\n<li>CSRF attack</li>\n<li>SQL injection</li>\n<li>CORS</li>\n</ul>\n</li>\n<li>\n<p>Testing</p>\n<ul>\n<li>mocks</li>\n<li>stubs</li>\n<li>spies</li>\n</ul>\n</li>\n<li>\n<p>Closures</p>\n</li>\n<li>\n<p>Hoisting</p>\n</li>\n<li>\n<p>Immutability</p>\n</li>\n<li>\n<p>Data types</p>\n</li>\n<li>\n<p>DOM</p>\n</li>\n<li>\n<p>Global &#x26; Local Scope</p>\n</li>\n<li>\n<p>Operators</p>\n</li>\n<li>\n<p>Undefined, null, &#x26; NaN</p>\n</li>\n<li>\n<p>logical operations</p>\n</li>\n<li>\n<p>Try/Catch block</p>\n</li>\n<li>\n<p>How to throw errors</p>\n</li>\n<li>\n<p>Error handling</p>\n</li>\n<li>\n<p>strict mode</p>\n</li>\n<li>\n<p>parameter vs arguments</p>\n</li>\n<li>\n<p>Functions vs Methods</p>\n</li>\n<li>\n<p>anonymous functions</p>\n</li>\n<li>\n<p>\"this\"</p>\n</li>\n<li>\n<p>bind</p>\n</li>\n<li>\n<p>Class</p>\n</li>\n<li>\n<p>Class inheritance</p>\n</li>\n<li>\n<p>recursion</p>\n</li>\n<li>\n<p>closures</p>\n</li>\n<li>\n<p>pure function</p>\n</li>\n<li>\n<p>side effects</p>\n</li>\n<li>\n<p>traverse the DOM</p>\n</li>\n<li>\n<p>sets</p>\n</li>\n<li>\n<p>symbols</p>\n</li>\n<li>\n<p>spread operator</p>\n</li>\n<li>\n<p>object.assign</p>\n</li>\n<li>\n<p>virtual DOM (how does react work with it)</p>\n</li>\n<li>\n<p>package managers</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortController</a></p>\n</li>\n<li>\n<p>How does React's Virtual DOM work</p>\n</li>\n<li>\n<p>How does Redux work</p>\n</li>\n<li>\n<p>When to use a stateful or stateless component in react</p>\n</li>\n<li>\n<p>When to use React's internal state versus Redux</p>\n</li>\n<li>\n<p>Variable hoisting</p>\n</li>\n<li>\n<p>What are promises (3 states of a promise fullified/rejected/pending)</p>\n</li>\n<li>\n<p>async/await</p>\n</li>\n<li>\n<p>HTTP methods</p>\n</li>\n<li>\n<p>Http status code</p>\n</li>\n<li>\n<p>CORS</p>\n</li>\n<li>\n<p>JSONP</p>\n</li>\n<li>\n<p>HTTP caching</p>\n<ul>\n<li>Web caches reduce latency and network traffic and thus lessen the time needed to display a representation of a resource</li>\n<li>It is important to cache a resource only until it changes, not longer.</li>\n<li>There are different types of caching: browser, proxy, gateway caches, CDN, reverse proxy caches</li>\n<li>Private caches are dedicated to a single user while publish caches are meant to be shared</li>\n<li>You can controll the caching with <code>cache-control</code> headers and max-age</li>\n<li>ETAG (It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed.)</li>\n</ul>\n</li>\n<li>\n<p>debounch</p>\n</li>\n<li>\n<p>closure (What is the difference between lexical scoping and closures)</p>\n</li>\n<li>\n<p>web sockets</p>\n</li>\n<li>\n<p>Server Sent Events</p>\n</li>\n<li>\n<p>What is the benefits of using async/await to promises (cleaner, try/catch blocks catch exception, callback is cleaner, debugging)</p>\n</li>\n<li>\n<p>testing frameworks</p>\n</li>\n<li>\n<p>recursive functions</p>\n<ul>\n<li>A function that calls itself.\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// stop calling itself</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>folder structure for server/client/package</p>\n</li>\n</ul>\n<p>==============================</p>\n<h1>JSDoc</h1>\n<ul>\n<li><a href=\"https://jsdoc.app/\"><code>JSDoc</code></a> is a documentation layer you can add to your source code to make it easier for others to use</li>\n<li>Why does it rock?\n<ul>\n<li>Documentation right next to the source code you are writing</li>\n<li>VSCode will use it to show you intellisence whenever you are using the functions/classes</li>\n<li>Easy to keep synced as functions/classes get updates</li>\n</ul>\n</li>\n<li><a href=\"https://jsdoc.app/about-getting-started.html\">Getting started</a></li>\n<li>Default types:\n<ul>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>boolean</code></li>\n<li><code>number</code></li>\n<li><code>string</code></li>\n<li><code>Array</code> or <code>[]</code></li>\n<li><code>Object</code> or <code>{}</code></li>\n<li>You can have a typed array: <code>any[]</code>, <code>number[]</code>, <code>string[]</code>.</li>\n<li>You could also have an array of object types: <code>Employee[]</code>.</li>\n</ul>\n</li>\n<li>How to add JSDoc comments:\n<ul>\n<li>\n<p>Simplest documentation:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/** This is a description of the foo function. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining a string parameter</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Prints a string to the console.\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">someString</span> - Some string to print to the console.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining the return value</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Example of defining a return value.\n * <span class=\"token keyword\">@return</span> void\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Example of defining a return value.\n * <span class=\"token keyword\">@return</span> string\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> someString<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining a parameter's default value</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n     * Param with a default value\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token optional-parameter\"><span class=\"token punctuation\">[</span><span class=\"token parameter\">year</span><span class=\"token punctuation\">=</span><span class=\"token code language-javascript\"><span class=\"token number\">2021</span></span><span class=\"token punctuation\">]</span></span>\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">printYear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining optional parameters with a <code>=</code> after the type without a space</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Define generic object.</span>\n<span class=\"token comment\">// This can have any number of properties of type any.</span>\n<span class=\"token doc-comment comment\">/**\n* <span class=\"token keyword\">@typedef</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">></span><span class=\"token punctuation\">}</span></span> <span class=\"token class-name\">Member</span>\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">name</span> The members's name.\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">=</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">age</span> The members's age (this is optional).\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">=</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">job</span> The member's job (this is optional).\n*/</span>\n<span class=\"token doc-comment comment\">/**\n* <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Member<span class=\"token punctuation\">}</span></span> Jack\n*/</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Jack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n age<span class=\"token operator\">:</span> <span class=\"token number\">28</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Define an Union type</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">}</span></span> value The value of the product.\n */</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token comment\">// or '12'</span>\n</code></pre></div>\n</li>\n<li>\n<p>Define a Intersection type</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n */</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Joe'</span><span class=\"token punctuation\">,</span> \n  age<span class=\"token operator\">:</span> <span class=\"token number\">32</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Auto generate documentation for the JSDoc comments</h2>\n<ul>\n<li>Now when you use this function/class in your code we should have VSCode intellisense with the description/params/return value</li>\n<li>JavaScript With <a href=\"https://www.npmjs.com/package/jsdoc\">JSDoc</a>: generating the docs\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> i jsdoc --save-dev\n$ ./node_modules/.bin/jsdoc src/somefile.js \n</code></pre></div>\n</li>\n</ul>\n<h2>Add Types to JSDoc</h2>\n<ul>\n<li>\n<p>Setup VSCode add to your <code>.vscode/settings.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"javascript.implicitProjectConfig.checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>With plain JavaScript this will give you some basic IntelliSense and flag type errors with red squiggles underneath</p>\n</li>\n<li>\n<p>You can have VSCode check a single file on/off by adding <code>// @ts-check</code> at the top of the file or <code>// @ts-nocheck</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token comment\">// The TypeScript engine will check all JavaScript in this file.</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-nocheck</span>\n<span class=\"token comment\">// The TypeScript engine will not check this file.</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can also disable a line or block of code by adding <code>// @ts-ignore</code></p>\n</li>\n</ul>\n<h1>JS Neat stuff</h1>\n<h2>Loop over a number of times</h2>\n<ul>\n<li>Sometimes you need to loop over an array a number of time to make some data\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{\"value\":0,\"label\":0},{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3}]</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Shorthand of if</h2>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/39488458/javascript-one-line-if-only-state-true\">stackoverflow</a></p>\n</li>\n<li>\n<p>In default 'if' one line statement are two block, for true, and false:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">variable <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> block <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> block<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>How declare 'if' with one block? I expect something like this: <code>variable ? true-block;</code></p>\n</li>\n<li>\n<p>You can do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">variable &#x26;amp;&#x26;amp; js-block</code></pre></div>\n</li>\n<li>\n<p>For example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> variable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> variable <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Recursive function</h2>\n<ul>\n<li></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> baseUrl<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.worldbank.org/v2/country/'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getIndicatorByCountry</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">country<span class=\"token punctuation\">,</span> indicator<span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>country<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/indicator/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>indicator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&#x26;format=json</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>  \n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pages</span> <span class=\"token operator\">></span> page<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getIndicatorByCountry</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">,</span> indicator<span class=\"token punctuation\">,</span> page<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n","ogImage":{"url":"/assets/covers/js.jpg"},"coverImage":"/assets/covers/js.jpg"}},"__N_SSG":true}