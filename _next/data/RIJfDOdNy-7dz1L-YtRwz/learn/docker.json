{"pageProps":{"post":{"title":"docker","slug":"docker","content":"<h1>Basic Commands</h1>\n<ul>\n<li>\n<p>Basic commands</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># List all the images you have locally</span>\n$ <span class=\"token function\">docker</span> images\n\n<span class=\"token comment\"># List all the running containers</span>\n$ <span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n\n<span class=\"token comment\"># List all available containers</span>\n$ <span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -a\n</code></pre></div>\n</li>\n<li>\n<p>Images</p>\n<ul>\n<li>Images are the blueprint to create a container\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> rmi <span class=\"token operator\">&#x3C;</span>IMAGE_NAME<span class=\"token operator\">></span>\n$ <span class=\"token function\">docker</span> build -t <span class=\"token operator\">&#x3C;</span>IMAGE_NAME<span class=\"token operator\">></span> -f Dockerfile <span class=\"token builtin class-name\">.</span>\n$ <span class=\"token function\">docker</span> run <span class=\"token operator\">&#x3C;</span>IMAGE_NAME<span class=\"token operator\">></span> -n <span class=\"token operator\">&#x3C;</span>CONTAINER_NAME<span class=\"token operator\">></span> -p <span class=\"token number\">8080</span>:8080\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Containers</p>\n<ul>\n<li>A container is a runnable instance of an image.</li>\n<li>You can have multiple containers that were built from the same image</li>\n<li>You can stop/start a container whenever\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> start <span class=\"token operator\">&#x3C;</span>CONTAINER_NAME<span class=\"token operator\">></span>\n$ <span class=\"token function\">docker</span> stop <span class=\"token operator\">&#x3C;</span>CONTAINER_NAME<span class=\"token operator\">></span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Creating an image</p>\n<ul>\n<li>\n<p>All Docker images are based off some other image</p>\n</li>\n<li>\n<p>Creating a basic nodejs applications create a <code>Dockerfile</code>:</p>\n<ol>\n<li>Create a simple nodejs express application:</li>\n</ol>\n<ul>\n<li>Add some dependencies\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D @babel/node@7 @babel/preset-env@7 @babel/cli@7 @babel/core@7\n$ <span class=\"token function\">npm</span> i express\n$ <span class=\"token function\">mkdir</span> src\n$ <span class=\"token function\">touch</span> src/index.js\n</code></pre></div>\n</li>\n<li>Create a <code>.babelrc</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"esmodules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add some script to your <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create <code>src/index.js</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">express</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Express\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all other routes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ENV_VAR</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ENV_VAR</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"none passes in\"</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...REST API is running, some ENV variable (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">ENV_VAR</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Create <code>Dockerfile</code> file</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-Dockerfile\"><code class=\"language-Dockerfile\">FROM node:14\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\nCOPY package*.json ./\nCOPY src/ ./src\n\nRUN npm install\nRUN npm run build\n\nEXPOSE 3000\nCMD [ &#x26;quot;npm&#x26;quot;, &#x26;quot;run&#x26;quot;, &#x26;quot;serve&#x26;quot; ]</code></pre></div>\n<ol start=\"3\">\n<li>Create image &#x26; run the container</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> build -t pdotwdot/hello-simple-express:latest <span class=\"token builtin class-name\">.</span>\n$ <span class=\"token function\">docker</span> images <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> pdotwdot/hello-simple-express\n$ <span class=\"token function\">docker</span> run --name qqqqq -e <span class=\"token assign-left variable\">ENV_VAR</span><span class=\"token operator\">=</span><span class=\"token string\">'some env!'</span> --rm  -p <span class=\"token number\">1234</span>:3000 -t pdotwdot/hello-simple-express:latest\n</code></pre></div>\n<ol start=\"4\">\n<li>You can connect to that running container</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it <span class=\"token operator\">&#x3C;</span>CONTAINER_NAME<span class=\"token operator\">></span> <span class=\"token function\">bash</span> \n$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it qqqqq <span class=\"token function\">bash</span> \n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Docker Compose for development</h1>\n<ul>\n<li>Update the <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prestart\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm i\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@babel/cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.14.8\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@babel/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.15.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@babel/node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.14.9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@babel/preset-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.15.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.12\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add a <code>.dockerignore</code> file with this:\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">node_modules\nnpm-debug.log</code></pre></div>\n</li>\n<li>Update the <code>Dockerfile</code>\n<ul>\n<li>Basically a shell of because we are going to add in the <code>src</code> as a volume\n<div class=\"remark-highlight\"><pre class=\"language-Dockerfile\"><code class=\"language-Dockerfile\">FROM node:14\nWORKDIR /usr/local/app/\n\nEXPOSE 3000\nCMD [ &#x26;quot;npm&#x26;quot;, &#x26;quot;run&#x26;quot;, &#x26;quot;serve&#x26;quot; ]</code></pre></div>\n</li>\n</ul>\n</li>\n<li>Create a <code>docker-compose.yml</code> file\n<div class=\"remark-highlight\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm start\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3000:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./src/<span class=\"token punctuation\">:</span>/usr/local/app/src/\n      <span class=\"token punctuation\">-</span> ./.babelrc<span class=\"token punctuation\">:</span>/usr/local/app/.babelrc\n      <span class=\"token punctuation\">-</span> ./package.json<span class=\"token punctuation\">:</span>/usr/local/app/package.json\n      <span class=\"token punctuation\">-</span> ./package<span class=\"token punctuation\">-</span>lock.json<span class=\"token punctuation\">:</span>/usr/local/app/package<span class=\"token punctuation\">-</span>lock.json\n</code></pre></div>\n</li>\n<li>Run a command to get it running &#x26; visit the site at <code>http://localhost:3000/</code>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker-compose</span> up\n$ <span class=\"token function\">docker-compose</span> up  -d \n</code></pre></div>\n</li>\n<li>Cleanup\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker-compose</span> down --rmi all\n</code></pre></div>\n</li>\n</ul>\n<h1>Good Practices with</h1>\n<ul>\n<li>Use .dockerignore to prevent leaking secrets\n<ul>\n<li>Include a .dockerignore file that filters out common secret files and development artifacts.</li>\n<li>By doing so, you might prevent secrets from leaking into the image.</li>\n<li>As a bonus the build time will significantly decrease.</li>\n<li>Also, ensure not to copy all files recursively rather explicitly choose what should be copied to Docker</li>\n<li>Dependencies install first, then code</li>\n</ul>\n</li>\n<li>Install \"system\" packages first</li>\n<li>Use explicit image reference, avoid latest tag</li>\n<li>Prefer smaller Docker base images</li>\n<li>Scan images for multi-layers of vulnerabilities</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-docker\"><code class=\"language-docker\">sudo apt-get install rpm\n $ wget https://github.com/aquasecurity/trivy/releases/download/{TRIVY_VERSION}/trivy_{TRIVY_VERSION}_Linux-64bit.deb\n $ sudo dpkg -i trivy_{TRIVY_VERSION}_Linux-64bit.deb\n trivy image [YOUR_IMAGE_NAME]\n</code></pre></div>\n<h1>Stop and remove all docker containers and images</h1>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#List all containers (only IDs)</span>\n$ <span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -aq\n\n<span class=\"token comment\"># Stop all running containers</span>\n$ <span class=\"token function\">docker</span> stop <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\">#Remove all containers</span>\n$ <span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\">#Remove all images</span>\n$ <span class=\"token function\">docker</span> rmi <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> images -q<span class=\"token variable\">)</span></span>\n</code></pre></div>\n<h1>Run a docker image and pass in environment variables</h1>\n<ul>\n<li>do this with the \"-e\" flag</li>\n<li>example:\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ docker run --rm --name test -e PORT=6666  my-image</code></pre></div>\n</li>\n</ul>\n<h1>Cleanup</h1>\n<ul>\n<li>If you’ve ever ran a docker image ls you’ve likely noticed 1 or more items that have a <none> repository and a <none> tag.</li>\n<li>Dangling images are not referenced by other images and are safe to delete.\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ docker rmi -f $(docker images -f &#x26;quot;dangling=true&#x26;quot; -q)</code></pre></div>\n</li>\n<li>newer versions of Docker (1.13+) there’s an even better command called <code>$ docker system prune</code> which will not only remove dangling images but it will also remove all stopped containers, all networks not used by at least 1 container, all dangling images and build caches.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ docker volume prune</code></pre></div>\n<h1>Tags</h1>\n<ul>\n<li>Tagging your image during the build with the <code>-t</code> flag\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># docker build -t &#x3C;USERNAME>/&#x3C;IMAGE_NAME>:&#x3C;TAG_NAME> .</span>\n$ <span class=\"token function\">docker</span> build -t philopian/simple-node-server:0.0.1 <span class=\"token builtin class-name\">.</span>\n</code></pre></div>\n</li>\n<li>You can tag an image after the fact with\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># docker tag &#x3C;IMAGE_ID> &#x3C;TAG_NAME></span>\n$ <span class=\"token function\">docker</span> tag def13b34dc63 jupyter-web-ui-base\n</code></pre></div>\n</li>\n</ul>\n","ogImage":{"url":"/assets/covers/docker.jpg"},"coverImage":"/assets/covers/docker.jpg"}},"__N_SSG":true}