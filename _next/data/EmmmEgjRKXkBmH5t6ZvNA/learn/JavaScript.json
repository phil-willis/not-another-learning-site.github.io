{"pageProps":{"post":{"title":"JavaScript","slug":"JavaScript","content":"<h1>Overview</h1>\n<ul>\n<li>\n<p>What is JavaScript</p>\n</li>\n<li>\n<p>Brief History</p>\n</li>\n<li>\n<p>var, let, Const</p>\n</li>\n<li>\n<p>Primitive vs Reference types</p>\n</li>\n<li>\n<p>Data Types</p>\n</li>\n<li>\n<p>Interaction: alert, prompt, confirm</p>\n</li>\n<li>\n<p>Type conversions</p>\n</li>\n<li>\n<p>Array &#x26; Array methods</p>\n</li>\n<li>\n<p>Object &#x26; Object Method</p>\n</li>\n<li>\n<p>Basic operators</p>\n</li>\n<li>\n<p>Comparisons</p>\n</li>\n<li>\n<p>Conditionals</p>\n</li>\n<li>\n<p>Logical operations</p>\n</li>\n<li>\n<p>Advanced working with functions</p>\n</li>\n<li>\n<p>Prototype</p>\n</li>\n<li>\n<p>Prototypes, inheritance</p>\n</li>\n<li>\n<p>Classes</p>\n</li>\n<li>\n<p>Error handling</p>\n</li>\n<li>\n<p>Promises, async/await</p>\n</li>\n<li>\n<p>Generators, advanced iteration</p>\n</li>\n<li>\n<p>Modules</p>\n</li>\n<li>\n<p>Arrow Functions</p>\n</li>\n<li>\n<p>Destructuring</p>\n</li>\n<li>\n<p>Template literals</p>\n</li>\n<li>\n<p>How the web works</p>\n</li>\n<li>\n<p>npm scripts &#x26; package.json</p>\n</li>\n<li>\n<p>husky &#x26; nvm versions</p>\n</li>\n<li>\n<p>sessions, cookies, &#x26; jwt</p>\n</li>\n<li>\n<p>HTTP caching</p>\n</li>\n<li>\n<p>OAuth</p>\n</li>\n<li>\n<p>Security</p>\n<ul>\n<li>CSRF attack</li>\n<li>SQL injection</li>\n<li>CORS</li>\n</ul>\n</li>\n<li>\n<p>Testing</p>\n<ul>\n<li>mocks</li>\n<li>stubs</li>\n<li>spies</li>\n</ul>\n</li>\n<li>\n<p>Closures</p>\n</li>\n<li>\n<p>Hoisting</p>\n</li>\n<li>\n<p>Immutability</p>\n</li>\n<li>\n<p>Data types</p>\n</li>\n<li>\n<p>DOM</p>\n</li>\n<li>\n<p>Global &#x26; Local Scope</p>\n</li>\n<li>\n<p>Operators</p>\n</li>\n<li>\n<p>Undefined, null, &#x26; NaN</p>\n</li>\n<li>\n<p>logical operations</p>\n</li>\n<li>\n<p>Try/Catch block</p>\n</li>\n<li>\n<p>How to throw errors</p>\n</li>\n<li>\n<p>Error handling</p>\n</li>\n<li>\n<p>strict mode</p>\n</li>\n<li>\n<p>parameter vs arguments</p>\n</li>\n<li>\n<p>Functions vs Methods</p>\n</li>\n<li>\n<p>anonymous functions</p>\n</li>\n<li>\n<p>\"this\"</p>\n</li>\n<li>\n<p>bind</p>\n</li>\n<li>\n<p>Class</p>\n</li>\n<li>\n<p>Class inheritance</p>\n</li>\n<li>\n<p>recursion</p>\n</li>\n<li>\n<p>closures</p>\n</li>\n<li>\n<p>pure function</p>\n</li>\n<li>\n<p>side effects</p>\n</li>\n<li>\n<p>traverse the DOM</p>\n</li>\n<li>\n<p>sets</p>\n</li>\n<li>\n<p>symbols</p>\n</li>\n<li>\n<p>spread operator</p>\n</li>\n<li>\n<p>object.assign</p>\n</li>\n<li>\n<p>virtual DOM (how does react work with it)</p>\n</li>\n<li>\n<p>package managers</p>\n</li>\n<li>\n<p>Web APIs Specifications</p>\n<ul>\n<li>Background Fetch API</li>\n<li>Clipboard API</li>\n<li>Console API</li>\n<li>Geolocation API</li>\n<li>HTML Drag and Drop API</li>\n<li>History API</li>\n<li>IndexedDB</li>\n<li>Service Workers API</li>\n<li>Storage</li>\n<li>URL API</li>\n<li>Web Crypto API</li>\n<li>Web Storage API</li>\n<li>Websockets API</li>\n<li>XMLHttpRequest</li>\n</ul>\n</li>\n<li>\n<p>Web APIs Interfaces</p>\n<ul>\n<li>AbortController</li>\n</ul>\n</li>\n<li>\n<p>How does React's Virtual DOM work</p>\n</li>\n<li>\n<p>How does Redux work</p>\n</li>\n<li>\n<p>When to use a stateful or stateless component in react</p>\n</li>\n<li>\n<p>When to use React's internal state versus Redux</p>\n</li>\n<li>\n<p>Variable hoisting</p>\n</li>\n<li>\n<p>What are promises (3 states of a promise fulfilled/rejected/pending)</p>\n</li>\n<li>\n<p>Promises &#x26; async/await</p>\n</li>\n<li>\n<p>HTTP methods</p>\n</li>\n<li>\n<p>Http status code</p>\n</li>\n<li>\n<p>CORS</p>\n</li>\n<li>\n<p>JSONP</p>\n</li>\n<li>\n<p>HTTP caching</p>\n</li>\n<li>\n<p>debounce</p>\n</li>\n<li>\n<p>closure (What is the difference between lexical scoping and closures)</p>\n</li>\n<li>\n<p>web sockets</p>\n</li>\n<li>\n<p>Server Sent Events</p>\n</li>\n<li>\n<p>What is the benefits of using async/await to promises (cleaner, try/catch blocks catch exception, callback is</p>\n</li>\n<li>\n<p>testing frameworks</p>\n</li>\n<li>\n<p>folder structure for server/client/package</p>\n</li>\n<li>\n<p>Loop over a number of times</p>\n</li>\n<li>\n<p>Ternary &#x26; shorthand for setting a value if true <code>let o = variable &#x26;&#x26; 3;</code></p>\n</li>\n<li>\n<p>Recursive function</p>\n</li>\n<li>\n<p><code>use strict</code></p>\n</li>\n<li>\n<p>JSDoc</p>\n</li>\n<li>\n<p>Babel</p>\n</li>\n</ul>\n<h1>What is JavaScript</h1>\n<ul>\n<li>Dynamic programming languages\n<ul>\n<li>Not pre-compiled</li>\n<li>Code evaluated and executed at runtime</li>\n<li>Code can change at runtime (variable types can change)</li>\n</ul>\n</li>\n<li>Weakly types programming languages\n<ul>\n<li>Data types are assumed automatically</li>\n<li>Strong types you have to define the types</li>\n</ul>\n</li>\n<li>Compiled at runtime</li>\n<li>JS was create to make webpages more dynamic</li>\n<li>JS is executed via JS engine\n<ul>\n<li>V8 (Chrome)</li>\n<li>SpiderMonkey (Firefox)</li>\n<li>the JS engine\n<ol>\n<li>Parse Code</li>\n<li>Compile to Machine code</li>\n<li>execute Machine code</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>All on an Single Thread on your operating system</li>\n<li>JS runs on a Host Environments\n<ul>\n<li>Browser-side\n<ul>\n<li>can't access local file system</li>\n<li>Runs in a sandbox</li>\n</ul>\n</li>\n<li>Server-side\n<ul>\n<li>Extracted the Chrome's V8 (JS Engine)</li>\n<li>You can run it on any machine</li>\n<li>Called Node.js</li>\n<li>You can run on the server</li>\n<li>You can run on any computer (Mac/Linux/Windows)</li>\n<li>Can't manipulate the DOM</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JS for web development\n<ul>\n<li>In web development <code>HTML</code> is the markup, <code>CSS</code> is the styling, &#x26; <code>JS</code> is the interactions</li>\n<li>There are some security measures that prevent certain things you cannot do with JS in the browser</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\">Great JS Reference MDN guide</a></li>\n<li>Each browser have their own <code>Developer Console</code></li>\n<li>For web development you can add your JS code inside of a <code>&#x3C;script>&#x3C;/script></code> tag inside of your HTML file\n<ul>\n<li>It's best to have the <code>script</code> tag at the bottom of the file so that all the elements are loaded before the JS gets executed</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>Before the script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Hello, world!'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...After the script.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>You can also provide an external script files with\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#x3C;RELATIVE_PATH><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Brief History</h1>\n<ul>\n<li>1995 Netscape release \"LiveScript\", then renamed to JavaScript</li>\n<li>1996 Microsoft release it's own version for IE</li>\n<li>1996 ECMA to start standardization (European Computer Manufacturers Association)</li>\n<li>In 2015 JS had a huge upgrade and we now use transpiling to convert to the older JS so that it can be used in older browsers</li>\n<li>6th Edition – ECMAScript 2015</li>\n<li>7th Edition – ECMAScript 2016</li>\n<li>8th Edition – ECMAScript 2017</li>\n<li>9th Edition – ECMAScript 2018</li>\n<li>10th Edition – ECMAScript 2019</li>\n<li>11th Edition – ECMAScript 2020</li>\n<li>Each browser comes with its own JS engine that also defines which features are actually supported</li>\n<li><a href=\"https://caniuse.com/\">caniuse</a> is a great resource to see if a feature is supported or not</li>\n<li>ECMA-Script is in active development</li>\n</ul>\n<p>==============================</p>\n<h1>var, let, Const</h1>\n<h1>Primitive vs Reference types</h1>\n<h1>Data Types</h1>\n<ul>\n<li>There are 6 Built in JS <code>primitive</code> data structures (how to remember them <code>BUNS BS</code>)\n4. <code>String</code>\n3. <code>Number</code>\n2. <code>Boolean</code>\n<ol>\n<li><code>undefined</code></li>\n<li><code>BigInt</code></li>\n<li><code>Symbol</code></li>\n</ol>\n</li>\n<li>Structural Root Primitive\n<ol>\n<li><code>null</code> ()</li>\n</ol>\n</li>\n<li>Structural types\n<ol>\n<li><code>Object</code> (almost everything made with the <code>new</code> keyword)</li>\n</ol>\n<ul>\n<li><code>new Object</code></li>\n<li><code>new Array</code></li>\n<li><code>new Map</code></li>\n<li><code>new Set</code></li>\n<li><code>new WeakMap</code></li>\n<li><code>new WeakSet</code></li>\n<li><code>new Date</code></li>\n</ul>\n<ol start=\"2\">\n<li><code>Function</code> (non-data structure, every <code>Function</code> constructor is derived from the <code>Object</code> constructor)</li>\n</ol>\n</li>\n</ul>\n<h2><code>String</code> (Primitive type)</h2>\n<h2><code>Number</code> (Primitive type)</h2>\n<h3>Numeric Separators</h3>\n<ul>\n<li><code>Number separators</code> is syntactic sugar that make working with numeric constants alot easier</li>\n<li>TL;DR you can add a <code>_</code> to a numeric value to make it more readable similar to what a <code>,</code> does when viewing large numbers\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Price</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token number\">6666666</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> priceWithNumberSeparators <span class=\"token operator\">=</span> <span class=\"token number\">6_666_666</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>priceWithNumberSeparators<span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n</ul>\n<h2><code>Boolean</code> (Primitive type)</h2>\n<h2><code>undefined</code> (Primitive type)</h2>\n<h2><code>BigInt</code> (Primitive type)</h2>\n<h2><code>Symbol</code> (Primitive type)</h2>\n<h2><code>Null</code> type</h2>\n<h2><code>Object</code> data type</h2>\n<h2><code>Array</code> data type</h2>\n<h2><code>Map</code> data type</h2>\n<h2><code>Set</code> data type</h2>\n<h2><code>WeakMap</code> data type</h2>\n<h2><code>WeakSet</code> data type</h2>\n<h2><code>Date</code> data type</h2>\n<p>===============================</p>\n<h1>Interaction: alert, prompt, confirm</h1>\n<h1>Type conversions</h1>\n<h1>Array &#x26; Array methods</h1>\n<h1>Object &#x26; Object Method</h1>\n<h1>Basic operators</h1>\n<h1>Comparisons</h1>\n<ul>\n<li><code>Comparison</code> and <code>Logical</code> operators are used to test for true or false.</li>\n<li>Comparison Operator:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Equal to</span>\nx <span class=\"token operator\">==</span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Equal to value &#x26; type</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">8</span>\n\n\n<span class=\"token comment\">// Not equal</span>\nx <span class=\"token operator\">!=</span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Not equal to value &#x26; type</span>\nx <span class=\"token operator\">!==</span> <span class=\"token number\">8</span>\n\n<span class=\"token comment\">// Greater than</span>\nx <span class=\"token operator\">></span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Greater than or equal to</span>\nx <span class=\"token operator\">>=</span> <span class=\"token number\">8</span>\n\n<span class=\"token comment\">// Less than</span>\nx <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Less than or equal to</span>\nx <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">8</span>\n</code></pre></div>\n</li>\n<li>Logical Operators\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// And</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">8</span> <span class=\"token operator\">&#x26;&#x26;</span> x <span class=\"token operator\">===</span> <span class=\"token number\">9</span>\n<span class=\"token comment\">// Or</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">8</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token number\">9</span>\n<span class=\"token comment\">// Not</span>\n<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>Conditional (Ternary) Operators\n<ul>\n<li><code>variableName = (condition) ? value1:value2</code></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> volatile <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Is Volatile'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Is NOT Volatile'</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Conditionals</h1>\n<h1>Logical operations</h1>\n<h1>Advanced working with functions</h1>\n<h1>Prototype</h1>\n<h1>Prototypes, inheritance</h1>\n<h1>Classes</h1>\n<h1>Error handling</h1>\n<h1>Promises, async/await</h1>\n<h1>Generators, advanced iteration</h1>\n<h1>Modules</h1>\n<h1>Arrow Functions</h1>\n<h1>Destructuring</h1>\n<h1>Template literals</h1>\n<h1>How the web works</h1>\n<h1>npm scripts &#x26; package.json</h1>\n<h1>husky &#x26; nvm versions</h1>\n<h1>sessions, cookies, &#x26; jwt</h1>\n<h1>HTTP caching</h1>\n<ul>\n<li>Web caches reduce latency and network traffic and thus lessen the time needed to display a representation of a resource</li>\n<li>It is important to cache a resource only until it changes, not longer.</li>\n<li>There are different types of caching: browser, proxy, gateway caches, CDN, reverse proxy caches</li>\n<li>Private caches are dedicated to a single user while publish caches are meant to be shared</li>\n<li>You can control the caching with <code>cache-control</code> headers and max-age</li>\n<li>ETAG (It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed.)</li>\n</ul>\n<h1>OAuth</h1>\n<h1>Security</h1>\n<h2>CSRF attack</h2>\n<h2>SQL injection</h2>\n<h2>CORS</h2>\n<h1>Testing</h1>\n<h2>mocks</h2>\n<h2>stubs</h2>\n<h2>spies</h2>\n<h1>Closures</h1>\n<h1>Hoisting</h1>\n<h1>Immutability</h1>\n<h1>Data types</h1>\n<h1>DOM</h1>\n<h1>Global &#x26; Local Scope</h1>\n<h1>Operators</h1>\n<h1>Undefined, null, &#x26; NaN</h1>\n<h1>logical operations</h1>\n<h1>Try/Catch block</h1>\n<h1>How to throw errors</h1>\n<h1>Error handling</h1>\n<h1>strict mode</h1>\n<h1>parameter vs arguments</h1>\n<h1>Functions vs Methods</h1>\n<h1>anonymous functions</h1>\n<h1>\"this\"</h1>\n<h1>bind</h1>\n<h1>Class</h1>\n<h1>Class inheritance</h1>\n<h1>recursion</h1>\n<h1>closures</h1>\n<h1>pure function</h1>\n<h1>side effects</h1>\n<h1>traverse the DOM</h1>\n<h1>sets</h1>\n<h1>symbols</h1>\n<h1>spread operator</h1>\n<h1>object.assign</h1>\n<h1>virtual DOM (how does react work with it)</h1>\n<h1>Package managers</h1>\n<h1>Web APIs Specifications &#x26; Interfaces</h1>\n<ul>\n<li>There are a large number of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#interfaces\">Web APIs available.</a>\n<h2>Background Fetch API</h2>\n<h2>Clipboard API</h2>\n<h2>Console API</h2>\n<h2>Geolocation API</h2>\n<h2>HTML Drag and Drop API</h2>\n<h2>History API</h2>\n<h2>IndexedDB</h2>\n<h2>Service Workers API</h2>\n<h2>Storage</h2>\n<h2>URL API</h2>\n<h2>Web Crypto API</h2>\n<h2>Web Storage API</h2>\n<h2>Websockets API</h2>\n<h2>XMLHttpRequest</h2>\n<h2>AbortController</h2>\n<h2>AbortController</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortController</a></li>\n</ul>\n</li>\n</ul>\n<h1>How does React's Virtual DOM work</h1>\n<h1>How does Redux work</h1>\n<h1>When to use a stateful or stateless component in react</h1>\n<h1>When to use React's internal state versus Redux</h1>\n<h1>Variable hoisting</h1>\n<h1>What are promises (3 states of a promise fullified/rejected/pending)</h1>\n<h1>Promises &#x26; async/await</h1>\n<h1>HTTP methods</h1>\n<h1>Http status code</h1>\n<h1>CORS</h1>\n<h1>JSONP</h1>\n<h1>HTTP caching</h1>\n<h1>debounce</h1>\n<h1>closure (What is the difference between lexical scoping and closures)</h1>\n<h1>web sockets</h1>\n<h1>Server Sent Events</h1>\n<h1>What is the benefits of using async/await to promises (cleaner, try/catch blocks catch exception, callback is cleaner, debugging)</h1>\n<h1>Testing frameworks</h1>\n<h1>Folder structure for server/client/package</h1>\n<h1>Loop over a number of times</h1>\n<ul>\n<li>Sometimes you need to loop over an array a number of time to make some data\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{\"value\":0,\"label\":0},{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3}]</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Ternary &#x26; shorthand for setting a value if true <code>let o = variable &#x26;&#x26; 3;</code></h1>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/39488458/javascript-one-line-if-only-state-true\">stackoverflow</a></p>\n</li>\n<li>\n<p>In default 'if' one line statement are two block, for true, and false:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">variable <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token literal-property property\">block</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> block<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>How declare 'if' with one block? I expect something like this: <code>variable ? true-block;</code></p>\n</li>\n<li>\n<p>You can do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">variable &#x26;amp;&#x26;amp; js-block</code></pre></div>\n</li>\n<li>\n<p>For example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> variable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> variable <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Recursive function</h1>\n<ul>\n<li>Recursive function is a function that calls itself until there is a break</li>\n<li><em>Always use caution</em> when using recursive functions cause you don't want to create an infinite loop. This is especially bad when an infinite loop happens on a server, it might cause you alot of $$$</li>\n<li>The general outline looks like this:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// stop calling itself</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Here is an example of calling a http resource can looping thru the pages with a recursive function:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.worldbank.org/v2/country/'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getIndicatorByCountry</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">country<span class=\"token punctuation\">,</span> indicator<span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>country<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/indicator/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>indicator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&#x26;format=json</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>  \n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pages</span> <span class=\"token operator\">></span> page<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getIndicatorByCountry</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">,</span> indicator<span class=\"token punctuation\">,</span> page<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<h1><code>use strict</code></h1>\n<ul>\n<li>For a long time, JavaScript evolved without compatibility issues. New features were added to the language while old functionality didn’t change.</li>\n<li>Up until 2009 (ES5) when the <code>use strict</code> was added so that new features to the language and modifications to existing one could happen</li>\n<li>JavaScript's strict mode, introduced in ECMAScript 5, is a way to opt in to a restricted variant of JavaScript</li>\n<li><code>use strict</code> is a <code>opt in</code> feature to restrict variant of JS</li>\n<li>All you have to do is to add <code>\"use strict\";</code> at the top of the JS file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this code works the modern way</span>\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n</li>\n<li>It works in most browsers, namely Firefox and Chrome.</li>\n<li>If it doesn’t, e.g. in an old browser, there’s an ugly, but reliable way to ensure use strict. Put it inside this kind of wrapper:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...your code here...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>You kinda don't have to worry about this if you are using a transpiler like babel used to write newer JS which gets converted to ES5 for builds</li>\n</ul>\n<h1>Conditionally add properties to an object</h1>\n<ul>\n<li>es6 is a better approach. But we can add a bit more sugar, by using the spread operator, and logical AND short circuit evaluation:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Avoid this</span>\n<span class=\"token keyword\">var</span> olderWay <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">someProp</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>olderWay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Nicer way</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">nonProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">tricky</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<p>===============================</p>\n<h1>Web application bundlers</h1>\n<h2>Webpack</h2>\n<ul>\n<li><a href=\"https://webpack.js.org/\">Webpack</a> homepage\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"></code></pre></div>\n</li>\n</ul>\n<h2>Vite</h2>\n<ul>\n<li><a href=\"https://vitejs.dev/\">Vite</a> homepage\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init vite@latest <span class=\"token operator\">&#x3C;</span>YOUR_APP_NAME<span class=\"token operator\">></span> -- --template react-ts\n</code></pre></div>\n</li>\n<li>Template options:\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">vanilla\nvanilla-ts\nvue\nvue-ts\nreact\nreact-ts\npreact\npreact-ts\nlit-element\nlit-element-ts\nsvelte\nsvelte-ts\n</code></pre></div>\n</li>\n</ul>\n<h2>Parcel</h2>\n<ul>\n<li><a href=\"https://parceljs.org/\">Parcel</a> homepage\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i parcel-bundler\n</code></pre></div>\n</li>\n<li>Update the <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel -p 8080 watch public/index.html\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel build public/index.html\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create a <code>public/index.html</code> file\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../src/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>Create a <code>src/index.html</code> file\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">console.log(\"hello Parcel\")\n</code></pre></div>\n</li>\n<li>Add Typescript, create a <code>tsconfig.json</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Update a <code>public/index.html</code> file\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../src/index.tsx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>Create a <code>src/index.tsx</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from tsx!'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Web Frameworks</h1>\n<h2>Nextjs</h2>\n<ul>\n<li><a href=\"https://nextjs.org/\">docs</a></li>\n</ul>\n<h2>Gatsby</h2>\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/\">docs</a></li>\n</ul>\n<h2>Create-React-App</h2>\n<ul>\n<li><a href=\"https://create-react-app.dev/\">docs</a></li>\n</ul>\n<h1>Publishing a JS library</h1>\n<ul>\n<li>\n<p>CommonJS (cjs) (a.k.a the require('xxx') and module.exports syntax) used to be the standard in which client-side libraries have be build.</p>\n</li>\n<li>\n<p>ECMAScript modules then shows up on the scenes where the community starts to migrate slowly to native ESM gradually. ESM as better named exports, better static analysis, tree-shaking, browser native support, the future of JavaScript</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CJS</span>\n<span class=\"token keyword\">const</span> someLib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./some-lib.js'</span><span class=\"token punctuation\">)</span>\nsomeLib<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ESM</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> doSomething <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./some-lib.mjs'</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>Compatibility</strong>, you can’t use ESM packages in CJS. You cannot use the <code>require</code> syntax in an ESM file:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ESM file</span>\n<span class=\"token keyword\">const</span> someLib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./some-lib.js'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CANNOT DO THIS</span>\n</code></pre></div>\n</li>\n<li>\n<p>Though you can just ship pure ESM packages, you may not want to do so right now because the majority of the ecosystem are still on CJS and the migration is not easy. Therefore, ship BOTH!</p>\n</li>\n</ul>\n<h1>JSDoc</h1>\n<ul>\n<li><a href=\"https://jsdoc.app/\"><code>JSDoc</code></a> is a documentation layer you can add to your source code to make it easier for others to use</li>\n<li>Why does it rock?\n<ul>\n<li>Documentation right next to the source code you are writing</li>\n<li>VSCode will use it to show you intellisence whenever you are using the functions/classes</li>\n<li>Easy to keep synced as functions/classes get updates</li>\n</ul>\n</li>\n<li><a href=\"https://jsdoc.app/about-getting-started.html\">Getting started</a></li>\n<li>Default types:\n<ul>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>boolean</code></li>\n<li><code>number</code></li>\n<li><code>string</code></li>\n<li><code>Array</code> or <code>[]</code></li>\n<li><code>Object</code> or <code>{}</code></li>\n<li>You can have a typed array: <code>any[]</code>, <code>number[]</code>, <code>string[]</code>.</li>\n<li>You could also have an array of object types: <code>Employee[]</code>.</li>\n</ul>\n</li>\n<li>How to add JSDoc comments:\n<ul>\n<li>\n<p>Simplest documentation:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/** This is a description of the foo function. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining a string parameter</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Prints a string to the console.\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">someString</span> - Some string to print to the console.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining the return value</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Example of defining a return value.\n * <span class=\"token keyword\">@return</span> void\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Example of defining a return value.\n * <span class=\"token keyword\">@return</span> string\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> someString<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining a parameter's default value</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n     * Param with a default value\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token optional-parameter\"><span class=\"token punctuation\">[</span><span class=\"token parameter\">year</span><span class=\"token punctuation\">=</span><span class=\"token code language-javascript\"><span class=\"token number\">2021</span></span><span class=\"token punctuation\">]</span></span>\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">printYear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining optional parameters with a <code>=</code> after the type without a space</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Define generic object.</span>\n<span class=\"token comment\">// This can have any number of properties of type any.</span>\n<span class=\"token doc-comment comment\">/**\n* <span class=\"token keyword\">@typedef</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">></span><span class=\"token punctuation\">}</span></span> <span class=\"token class-name\">Member</span>\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">name</span> The member's name.\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">=</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">age</span> The member's age (this is optional).\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">=</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">job</span> The member's job (this is optional).\n*/</span>\n<span class=\"token doc-comment comment\">/**\n* <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Member<span class=\"token punctuation\">}</span></span> Jack\n*/</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Jack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">28</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Define an Union type</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">}</span></span> value The value of the product.\n */</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token comment\">// or '12'</span>\n</code></pre></div>\n</li>\n<li>\n<p>Define a Intersection type</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n */</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Joe'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">32</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Auto generate documentation for the JSDoc comments</h2>\n<ul>\n<li>Now when you use this function/class in your code we should have VSCode intellisense with the description/params/return value</li>\n<li>JavaScript With <a href=\"https://www.npmjs.com/package/jsdoc\">JSDoc</a>: generating the docs\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> i jsdoc --save-dev\n$ ./node_modules/.bin/jsdoc src/somefile.js \n</code></pre></div>\n</li>\n</ul>\n<h2>Add Types to JSDoc</h2>\n<ul>\n<li>\n<p>Setup VSCode add to your <code>.vscode/settings.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"javascript.implicitProjectConfig.checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>With plain JavaScript this will give you some basic IntelliSense and flag type errors with red squiggles underneath</p>\n</li>\n<li>\n<p>You can have VSCode check a single file on/off by adding <code>// @ts-check</code> at the top of the file or <code>// @ts-nocheck</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token comment\">// The TypeScript engine will check all JavaScript in this file.</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-nocheck</span>\n<span class=\"token comment\">// The TypeScript engine will not check this file.</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can also disable a line or block of code by adding <code>// @ts-ignore</code></p>\n</li>\n</ul>\n<h1>Babel</h1>\n<h2>Babel 6</h2>\n<ul>\n<li>Add some dependencies\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D babel-cli@6 babel-preset-env @babel/core@6\n$ <span class=\"token function\">npm</span> i express\n</code></pre></div>\n</li>\n<li>Create a <code>.babelrc</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add some script to your <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create <code>src/index.js</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">express</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Express\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all other routes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...The magic happens at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Babel 7</h2>\n<ul>\n<li>Add some dependencies\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D @babel/node@7 @babel/preset-env@7 @babel/cli@7 @babel/core@7\n$ <span class=\"token function\">npm</span> i express\n</code></pre></div>\n</li>\n<li>Create a <code>.babelrc</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"esmodules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n</li>\n<li>Add some script to your <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create <code>src/index.js</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">express</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Express\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all other routes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...The magic happens at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Babel 7 for React App</h1>\n<ol>\n<li>Setup</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> -p src\n$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D @babel/core @babel/preset-env @babel/preset-react babel-loader file-loader css-loader style-loader webpack webpack-cli html-webpack-plugin webpack-dev-server\n</code></pre></div>\n<ol start=\"2\">\n<li>Add Babel</li>\n</ol>\n<ul>\n<li>Add a <code>.babelrc</code> file in the root of your site\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@babel/preset-react\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Add Webpack</li>\n</ol>\n<ul>\n<li>Update your package.json\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --mode development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add a <code>./webpack.config.js</code> files\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">HtmlWebpackPlugin</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Where files should be sent once they are bundled</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.bundle.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// webpack 5 comes with devServer which loads in development mode</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">watchContentBase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Rules of how webpack will take our files, complie &#x26; bundle them for the browser</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span><span class=\"token group punctuation\">(</span>js<span class=\"token alternation keyword\">|</span>jsx<span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">nodeModules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>css<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/index.html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Ready to make your react site!</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ npm i react react-dom\n$ touch src/index.html &#x26;amp;&#x26;amp; touch src/index.js</code></pre></div>\n<ul>\n<li>\n<p><code>./src/index.html</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>title</span><span class=\"token punctuation\">></span></span>React Webpack App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>\n<p><code>./src/index.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDom</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./App\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">\"./App.css\"</span>\n\n<span class=\"token maybe-class-name\">ReactDom</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>\n<p><code>./src/App.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h2<span class=\"token operator\">></span><span class=\"token maybe-class-name\">Welcome</span> to <span class=\"token maybe-class-name\">React</span> <span class=\"token maybe-class-name\">App</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h3<span class=\"token operator\">></span><span class=\"token known-class-name class-name\">Date</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p><code>./src/App.css</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h2</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">teal</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n","ogImage":{"url":"/assets/covers/js.jpg"},"coverImage":"/assets/covers/js.jpg"}},"__N_SSG":true}