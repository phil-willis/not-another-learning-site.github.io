{"pageProps":{"post":{"title":"nestjs","slug":"nestjs","content":"<h1>Nest.js</h1>\n<ul>\n<li>Not to be confused with <code>Next.js</code></li>\n<li>Nestjs is a nodejs framework for building server-side applications</li>\n<li>Under the hood, Nest makes use of robust HTTP Server frameworks like Express (the default) and optionally can be configured to use Fastify as well!</li>\n<li>It is somewhat opinionated and forces us to follow its vision of how an application should look like to some extent.</li>\n<li>Concepts like: Controllers, Providers, Modules, Middleware, Pipes, Guards keeps you in a structed code base which in the JS world might be a breath of fresh air.</li>\n<li>Check out the official docs <a href=\"https://docs.nestjs.com/\">here</a></li>\n</ul>\n<h1>Getting started</h1>\n<ul>\n<li>Install and use the Nest CLI\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> i -g @nestjs/cli\n$ nest new project-name\n</code></pre></div>\n</li>\n<li>Alternatively you can clone the starter repo\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> clone https://github.com/nestjs/typescript-starter.git project\n$ <span class=\"token builtin class-name\">cd</span> project\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n$ <span class=\"token function\">npm</span> run start\n</code></pre></div>\n</li>\n<li>You can also just update your package.json to have:\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"new\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nest generate resource\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Being opinionated, you're gonna want to structure your routes with controller/service potentially models &#x26; stores</li>\n<li>Update the linting</li>\n</ul>\n<ol>\n<li>Install some packages\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Linting packages</span>\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-prettier prettier @trivago/prettier-plugin-sort-imports\n\n$ <span class=\"token function\">mkdir</span> .vscode\n$ <span class=\"token function\">touch</span> .vscode/settings.json .prettierrc .eslintrc \n</code></pre></div>\n</li>\n<li>Update the <code>.eslint.js</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">'@typescript-eslint/parser'</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">project</span><span class=\"token operator\">:</span> <span class=\"token string\">'tsconfig.json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tsconfigRootDir</span><span class=\"token operator\">:</span> __dirname<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@typescript-eslint/eslint-plugin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plugin:prettier/recommended'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">jest</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">ignorePatterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.eslintrc.js'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add to the <code>./.prettierrc</code> file</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"importOrder\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^@core/(.*)$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"^@server/(.*)$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"^@ui/(.*)$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"^[./]\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"importOrderSeparation\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol start=\"4\">\n<li>Add to the <code>./.vscode/settings.json</code> file</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Set prettier to be the default formatter</span>\n  <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Don't format any files by default</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token property\">\"[json]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// JavaScript stuff</span>\n  <span class=\"token property\">\"[javascript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// TypeScript stuff if you need it</span>\n  <span class=\"token property\">\"[typescript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol start=\"5\">\n<li>Add dotenv for the custom port</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> dotenv\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/core'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">'dotenv'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.module'</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">⚡ The magic happens at: http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ol start=\"6\">\n<li>Zip the dist folder with only the node_modules needed for the app</li>\n</ol>\n<ul>\n<li>Install a zipper package\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> lambda-zipper -D\n</code></pre></div>\n</li>\n<li>Update the <code>package.json</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nest build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"postbuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lambda-zipper build -f dist -o build/app.zip\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node main\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write \\\"src/*.ts\\\" \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li><strong>NOTE:</strong> make sure you update the <code>start</code> script to <code>\"start\": \"node main\"</code> so the build version of the app works</li>\n</ul>\n<h1>Make your first route</h1>\n<ul>\n<li>\n<p>So the default app is very bare-bones, let's add a component based route</p>\n</li>\n<li>\n<p>Create an entire route resource with one command</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ nest generate resource quotes\n$ <span class=\"token function\">yarn</span> lint\n</code></pre></div>\n</li>\n<li>\n<p>(or) Create the controller/service/module with the CLI</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ nest generate controller quotes\n$ nest generate module quotes\n$ nest generate <span class=\"token function\">service</span> quotes\n</code></pre></div>\n</li>\n<li>\n<p>This will create a bunch of files</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">src/quotes\n├── dto\n│   ├── create-quote.dto.ts\n│   └── update-quote.dto.ts\n├── entities\n│   └── quote.entity.ts\n├── quotes.controller.spec.ts\n├── quotes.controller.ts\n├── quotes.module.ts\n├── quotes.service.spec.ts\n└── quotes.service.ts\n</code></pre></div>\n</li>\n<li>\n<p>NestJS provides a  <code>@Body()</code> decorator that gives us easy access to the body.</p>\n</li>\n<li>\n<p><code>dto</code> stands for Data Transfer Object and it defines the format of the data sent in a request.</p>\n</li>\n<li>\n<p>It can be either an interface or a class</p>\n</li>\n<li>\n<p>Controllers's sole responsibility is to deal with http request/response, as for the <code>service</code>'s responsibility is to deal with business logic. You could also take it a step further and create <code>models</code> or <code>store</code> to deal with querying the database however if you are using a ORM you could probably ignore the <code>store</code> for the DB is agnostic</p>\n</li>\n<li>\n<p>SOILD principles with the goal that makes our software easier to understand/maintain/read</p>\n<ul>\n<li><strong>S</strong><code>ingle responsibilty</code> principle: a class/module should obly be responsible for a single function</li>\n<li><strong>O</strong><code>pen-closed</code> principle: software entities should be open for extension but closed for modification.</li>\n<li><strong>L</strong><code>iskov substitution</code> principle: changing one area of our system does not break other parts.</li>\n<li><strong>I</strong><code>nterface segregation</code> principle: emphasis on creating smaller and more specific interfaces. No client should be forced to depend on methods it does not use. By putting too many properties in our interfaces, we risk breaking the above rule.</li>\n<li><strong>D</strong><code>ependency inversion</code> principle: high-level modules should not depend on the low-level modules. Instead, both of them should depend on abstractions.</li>\n</ul>\n</li>\n</ul>\n<!-- https://wanago.io/2020/02/03/applying-solid-principles-to-your-typescript-code/ -->\n<h2>Validator</h2>\n<ul>\n<li>\n<p>Leveraging your DTO to do validation by adding some class-decorators. Info <a href=\"https://www.npmjs.com/package/class-validator\">here</a></p>\n</li>\n<li>\n<p><strong>note</strong>: you want to add it as a devDependency to keep the build version of the application at a minimum</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D class-validator class-transformer\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> IsNotEmpty<span class=\"token punctuation\">,</span> Length <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class-validator'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateQuoteDto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">IsNotEmpty</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// validator</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Length</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// validator</span>\n  quote<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Length</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// validator</span>\n  author<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>now in the POST code should look like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">UsePipes</span></span><span class=\"token punctuation\">(</span>ValidationPipe<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// we can add pipes to validate the defined DTO</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createQuoteDto<span class=\"token operator\">:</span> CreateQuoteDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createQuoteDto<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Now if you try to do a POST in the client and the body doesn't validate Nestjs will send a <code>400</code></p>\n</li>\n</ul>\n<h2>Controller</h2>\n<ul>\n<li>\n<p>Remember that the Controller's job is to deal with http request/response and use the service methods to do all the business logic</p>\n</li>\n<li>\n<p>Also notice that with Nestjs we can leverage decorators for defining HTTP verbs and accessing the POST/PUT bodies</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Controller<span class=\"token punctuation\">,</span>\n  Get<span class=\"token punctuation\">,</span>\n  Post<span class=\"token punctuation\">,</span>\n  Put<span class=\"token punctuation\">,</span>\n  Body<span class=\"token punctuation\">,</span>\n  Param<span class=\"token punctuation\">,</span>\n  Delete<span class=\"token punctuation\">,</span>\n  UsePipes<span class=\"token punctuation\">,</span>\n  ValidationPipe<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Added this package to deal with validation of the DTO</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateQuoteDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/create-quote.dto'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UpdateQuoteDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/update-quote.dto'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuotesService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./quotes.service'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'quotes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuotesController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> quotesService<span class=\"token operator\">:</span> QuotesService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">UsePipes</span></span><span class=\"token punctuation\">(</span>ValidationPipe<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Validate the Data Transfer Object</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createQuoteDto<span class=\"token operator\">:</span> CreateQuoteDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createQuoteDto<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':id'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Put</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':id'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">UsePipes</span></span><span class=\"token punctuation\">(</span>ValidationPipe<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Validate the Data Transfer Object</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> updateQuoteDto<span class=\"token operator\">:</span> UpdateQuoteDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span> updateQuoteDto<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Delete</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':id'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n</li>\n</ul>\n<h2>The Service file</h2>\n<ul>\n<li>The job of a service is to separate the business logic from controllers, making it cleaner and more comfortable to test.</li>\n<li>He's the default service created by the Nestjs command, with some in-memory object storage\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateQuoteDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/create-quote.dto'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UpdateQuoteDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/update-quote.dto'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuotesService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> lastQuotetId <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">private</span> quotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createQuoteDto<span class=\"token operator\">:</span> CreateQuoteDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastQuotetId\n    <span class=\"token keyword\">const</span> newItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>createQuoteDto <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newItem\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> newItem <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> item <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> updateQuoteDto<span class=\"token operator\">:</span> UpdateQuoteDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> updateQuoteDto\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> deletedItem <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotes<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Deleted'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> deletedItem<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Modules</h2>\n<ul>\n<li>We use modules to organize our application, so this complete route will be packaged in a module:\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuotesController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./quotes.controller'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuotesService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./quotes.service'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>QuotesController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>QuotesService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuotesModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>And the module will be added to the <strong>root module</strong>*, <code>./src/app.module.ts</code>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuotesModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./quotes/quotes.module'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>QuotesModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Using <code>ConfigService</code> to deal with environment variables</h1>\n<ul>\n<li>\n<p>Docs <a href=\"https://docs.nestjs.com/techniques/configuration\">here</a></p>\n</li>\n<li>\n<p>In Node.js applications, it's common to use .env files, holding key-value pairs where each key represents a particular value, to represent each environment. Running an app in different environments is then just a matter of swapping in the correct .env file.</p>\n</li>\n<li>\n<p>A good approach for using this technique in Nest is to create a <code>ConfigModule</code> that exposes a <code>ConfigService</code> which loads the appropriate .env file. While you may choose to write such a module yourself, for convenience Nest provides the <code>@nestjs/config</code> package out-of-the box.</p>\n</li>\n<li>\n<p>The <code>@nestjs/config</code> package internally uses <code>dotenv</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @nestjs/config\n</code></pre></div>\n</li>\n<li>\n<p><code>app.module.ts</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConfigModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/config'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can specify which <code>.env</code> file to use in the <code>app.module.ts</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConfigModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/config'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuotesModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./quotes/quotes.module'</span>\n\n<span class=\"token keyword\">const</span> EnvModule <span class=\"token operator\">=</span> ConfigModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  envFilePath<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.env.development'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.env'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>EnvModule<span class=\"token punctuation\">,</span> QuotesModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The order matters</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n</li>\n</ul>\n<h1>Add Swagger</h1>\n<ul>\n<li><code>OpenAPI</code> &#x26; <code>Swagger</code>, we can create a user interface that serves as interactive API documentation for our project.</li>\n<li>The <code>OpenAPI</code> is a specification used to describe our API and gives us a way to provide the details of our endpoints.</li>\n<li><code>Swagger</code> is a set of tools built around the <code>OpenAPI</code> specification. It allows us to render the OpenAPI specification we wrote in as the API documentation. The thing that makes it so valuable is that it is interactive.</li>\n<li>Install some packages:\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @nestjs/swagger swagger-ui-express\n</code></pre></div>\n</li>\n<li>Create a <code>./src/utils/swagger.ts</code> file\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DocumentBuilder<span class=\"token punctuation\">,</span> SwaggerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/swagger'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">SetupSwagger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> swaggerConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DocumentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'API with NestJS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">'API developed throughout the API with NestJS course'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.0'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> document <span class=\"token operator\">=</span> SwaggerModule<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> swaggerConfig<span class=\"token punctuation\">)</span>\n  SwaggerModule<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token string\">'docs'</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Update your <code>./src/main.ts</code> file to include your Swagger addition</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConfigService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/config'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/core'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.module'</span>\n<span class=\"token keyword\">import</span> SetupSwagger <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils/swagger'</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> configService <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ConfigService<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Swagger</span>\n  <span class=\"token function\">SetupSwagger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token comment\">// This line here to add swagger</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> configService<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PORT'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">3000</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">⚡ The magic happens at: http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ul>\n<li>Unfortunately, the specification we’ve defined so far does not contain much detail. So update the <code>./nest-cli.json</code> so that the schema can show up in the Swagger doc, update the <code>compilerOptions.plugins</code> to include nestjs swagger\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@nestjs/swagger\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\"@nestjs/swagger\" leverage your DTO objects that you create</li>\n<li>You can also group your calls my using the <code>import { ApiTags } from '@nestjs/swagger';</code> in your controllers:\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Controller<span class=\"token punctuation\">,</span>\n  Get<span class=\"token punctuation\">,</span>\n  Post<span class=\"token punctuation\">,</span>\n  Put<span class=\"token punctuation\">,</span>\n  Body<span class=\"token punctuation\">,</span>\n  Param<span class=\"token punctuation\">,</span>\n  Delete<span class=\"token punctuation\">,</span>\n  UsePipes<span class=\"token punctuation\">,</span>\n  ValidationPipe<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiTags <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/swagger'</span>  <span class=\"token comment\">// Import this</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateQuoteDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/create-quote.dto'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UpdateQuoteDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dto/update-quote.dto'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuotesService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./quotes.service'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'quotes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ApiTags</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Quotes'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Add this </span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuotesController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>You can also describe your endpoints with more details. We can use decorators such as <code>@ApiParam()</code> and <code>@ApiResponse()</code> to provide more details about our endpoints.\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'quotes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ApiTags</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Quotes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuotesController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> quotesService<span class=\"token operator\">:</span> QuotesService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':id'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ApiParam</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">'Should be an id of a quote that exists in the database'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Add a database with Prisma</h1>\n<ul>\n<li>\n<p>With Prisma, we describe our data using a Prisma schema file. It uses its own data modeling language and acts as a single source of truth. This differs from traditional ORMs that provide an object-oriented way of working with the database.</p>\n</li>\n<li>\n<p>Every time we make changes to the schema file, we need to generate the Prisma client. In this process, Prisma parses our schema and creates a client along with all the TypeScript typings. This means that we no don't map SQL tables to model classes through the TypeScript code manually.</p>\n</li>\n<li>\n<p>Let's use Docker to deal with the database</p>\n<div class=\"remark-highlight\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">postgres</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> nestjs<span class=\"token punctuation\">-</span>postgres\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"5432:5432\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./volumes/postgres<span class=\"token punctuation\">:</span>/data/postgres\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> docker.env\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> postgres\n\n  <span class=\"token key atrule\">pgadmin</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> postgres<span class=\"token punctuation\">:</span>postgres\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> nestjs<span class=\"token punctuation\">-</span>pgadmin\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> dpage/pgadmin4\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:80\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./volumes/pgadmin<span class=\"token punctuation\">:</span>/root/.pgadmin\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> docker.env\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> postgres\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">postgres</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> bridge\n</code></pre></div>\n</li>\n<li>\n<p>Create a <code>docker.env</code> file to deal with the postgres configs</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">POSTGRES_USER</span><span class=\"token operator\">=</span>admin\n<span class=\"token assign-left variable\">POSTGRES_PASSWORD</span><span class=\"token operator\">=</span>admin\n<span class=\"token assign-left variable\">POSTGRES_DB</span><span class=\"token operator\">=</span>nestjs\n<span class=\"token assign-left variable\">PGADMIN_DEFAULT_EMAIL</span><span class=\"token operator\">=</span>admin@admin.com\n<span class=\"token assign-left variable\">PGADMIN_DEFAULT_PASSWORD</span><span class=\"token operator\">=</span>admin\n</code></pre></div>\n</li>\n<li>\n<p>Install prisma</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> prisma @prisma/client\n$ npx prisma init\n</code></pre></div>\n</li>\n<li>\n<p>Prisma will create a <code>./prisma/schema.prisma</code> &#x26; add the database url to the <code>.env</code> file.</p>\n</li>\n<li>\n<p>Update the <code>.env</code> to use the database url we're gonna use with docker-compose postgres service</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"postgresql://admin:admin@localhost:5432/nestjs?schema=public\"</span>\n</code></pre></div>\n</li>\n<li>\n<p>If the provider is not postgres update the <code>./prisma/schema.prisma</code> file with it</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">datasource db <span class=\"token punctuation\">{</span>\n  provider <span class=\"token operator\">=</span> <span class=\"token string\">\"postgresql\"</span>\n  url      <span class=\"token operator\">=</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DATABASE_URL\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ngenerator client <span class=\"token punctuation\">{</span>\n  provider <span class=\"token operator\">=</span> <span class=\"token string\">\"prisma-client-js\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>If you are using vscode, this might also be a good opportunity to install the <code>Prisma VS Code Extension</code>, extension id: <code>Prisma.prisma</code></p>\n</li>\n<li>\n<p>Start the local database</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker-compose</span> up\n</code></pre></div>\n</li>\n<li>\n<p>Create a Prisma Client <code>./src/utils/prisma/</code></p>\n</li>\n<li>\n<p>Create <code>./src/utils/prisma/prisma.service.ts</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> OnModuleInit<span class=\"token punctuation\">,</span> OnModuleDestroy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@prisma/client'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrismaService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PrismaClient</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnModuleInit</span><span class=\"token punctuation\">,</span> OnModuleDestroy <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onModuleInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onModuleDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Create <code>./src/utils/prisma/prisma.module.ts</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./prisma.service'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>PrismaService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>PrismaService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrismaModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n</li>\n<li>\n<p>When we want to modify the structure of our database, we should create a migration. It consists of a SQL script that is supposed to make the necessary changes. Although we could write it by hand, Prisma can do it for us with the Prisma Migrate tool.</p>\n</li>\n<li>\n<p>Let's create a <code>./prisma/base.prisma</code> file to store the provider and datasource db</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n</code></pre></div>\n</li>\n<li>\n<p>Now, let’s define a simple Quote model in our schema that we can store in our <code>./src/quotes</code> path. Create <code>./src/quotes/schema.prisma</code>. (Note: make sure you define the model with lowercase characters, PG doesn't like uppercase for table names)</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">model quote {\n  id        Int      @default(autoincrement()) @id\n  quote     String\n  author    String\n}\n</code></pre></div>\n</li>\n<li>\n<p>We can use the <a href=\"https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#model-field-scalar-types\">prisma data types</a> eventhough we've only used Int and String</p>\n</li>\n<li>\n<p>In our Quote model, we also use the @id attribute. Thanks to that, our id field becomes the primary key.</p>\n</li>\n<li>\n<p>Now we can update our <code>package.json</code> to contatenate all the primas schemas and update the <code>./prisma/schema.prisma</code> file with them all:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"docker:db:up\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docker-compose up\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"docker:db:down\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docker-compose down\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preprisma:snapshot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cat prisma/base.prisma > prisma/schema.prisma &#x26;&#x26; cat src/*/*.prisma >> prisma/schema.prisma\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prisma:snapshot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npx prisma migrate dev --name migrate --preview-feature\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preprisma:push\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cat prisma/base.prisma > prisma/schema.prisma &#x26;&#x26; cat src/*/*.prisma >> prisma/schema.prisma\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prisma:push\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prisma db push\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Create your first migration</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> prisma:snapshot\n</code></pre></div>\n</li>\n<li>\n<p>Update the database to have the new schema</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> prisma:push\n</code></pre></div>\n</li>\n<li>\n<p>We can now go to PGAdmin to see our database, got to http://localhost:8080\n<img src=\"/assets/blog/nestjs/pgadmin-docker.jpg\" alt=\"pgadmin-docker\"></p>\n<ul>\n<li>Login with:\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> container-postgresdb<span class=\"token punctuation\">,</span>\n  host<span class=\"token operator\">:</span> host.docker.internal<span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> postgres<span class=\"token punctuation\">,</span>\n  user<span class=\"token operator\">:</span> postgres<span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> admin\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Logging</h1>\n<ul>\n<li>\n<p>NestJS is equipped with a logger ready to use out of the box.</p>\n</li>\n<li>\n<p>Default logging</p>\n</li>\n<li>\n<p>There are a few to choose from, sorted by &#x3C;SEVERITY_TYPE>:</p>\n<ul>\n<li>error</li>\n<li>warn</li>\n<li>log</li>\n<li>verbose</li>\n<li>debug</li>\n</ul>\n</li>\n<li>\n<p>Add a logger property to your service/controller e.g. <code>private readonly logger = new Logger(QuotesService.name)</code></p>\n</li>\n<li>\n<p>Use the logger with this.logger.&#x3C;SEVERITY_TYPE>('whatever message')</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuotesService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">(</span>QuotesService<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quote not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[findOne]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' not found'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>Authentication</h1>\n<ul>\n<li>You should really leverage (Passport)[https://www.passportjs.org/] &#x26; <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt</a></li>\n<li><a href=\"https://docs.nestjs.com/techniques/authentication\">NestJS documentation</a> suggests using the Passport library and provides us with the means to do so. Passport gives us an abstraction over the authentication, thus relieving us from some heavy lifting. Also, it is heavily tested in production by many developers.</li>\n<li><code>Guard</code> is responsible for determining whether the route handler handles the request or not. We're going to use Passport Guards in our controller</li>\n<li><a href=\"https://docs.nestjs.com/security/authentication#implementing-passport-jwt\">implementing-passport-jwt</a></li>\n</ul>\n<h2>Handling passwords</h2>\n<ul>\n<li>We never want to store passwords in plain-text in the databse, we want to hash them with a one directional.</li>\n<li>Hashing algorithm transforms one string into another string.</li>\n<li>We can also use <code>salt</code> to prevent hashes with the same values to look the same, think about if multiple users have the same password they would look the same</li>\n<li><a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt</a> is a great hashing algorithm that takes care of hashing the strings, comparing plain strings with hashes, and appending salt. It also prevent against bruteforce because it limits the amount to attempt to compare strings</li>\n<li><strong>NOTE:</strong> An important thing that we return the same error, whether the email or password is wrong. Doing so prevents some attacks that would aim to get a list of emails registered in our database.</li>\n<li>Note that both techniques achieve the same end-result.\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Technique 1 (generate a salt and hash on separate function calls):</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">genSalt</span><span class=\"token punctuation\">(</span>saltRounds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> salt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bcrypt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hash</span><span class=\"token punctuation\">(</span>myPlaintextPassword<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Store hash in your password DB.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Technique 2 (auto-gen a salt and hash):</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hash</span><span class=\"token punctuation\">(</span>myPlaintextPassword<span class=\"token punctuation\">,</span> saltRounds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Store hash in your password DB.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n","ogImage":{"url":"/assets/covers/_blank_.jpg"},"coverImage":"/assets/covers/_blank_.jpg"}},"__N_SSG":true}