{"pageProps":{"post":{"title":"JavaScript","slug":"JavaScript","content":"<details>\n<summary>What is JavaScript</summary>\n<ul>\n<li>Dynamic programming languages\n<ul>\n<li>Not pre-compiled</li>\n<li>Code evaluated and executed at runtime</li>\n<li>Code can change at runtime (variable types can change)</li>\n</ul>\n</li>\n<li>JS uses dynamic types, variables defines are flexible in that they can be re-asigned to different value types</li>\n<li>Weakly types programming languages\n<ul>\n<li>Data types are assumed automatically</li>\n<li>Strong types you have to define the types</li>\n</ul>\n</li>\n<li>Compiled at runtime (Just In Time, JIT)</li>\n<li>JS was created to make webpages more dynamic, however Ryan Dahl in 2009 ripped out the JS engine so it can be run on a computer directed and called it NodeJS. Now we can use JS for local web development as well as run node on servers!</li>\n<li>JS is executed via JS engine\n<ul>\n<li>V8 (Chrome)</li>\n<li>SpiderMonkey (Firefox)</li>\n<li>the JS engine\n<ol>\n<li>Parse Code</li>\n<li>Compile to Machine code</li>\n<li>execute Machine code</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>All on an Single Thread on your operating system</li>\n<li>JS runs on a Host Environments\n<ul>\n<li>Browser-side\n<ul>\n<li>can't access local file system</li>\n<li>Runs in a sandbox</li>\n</ul>\n</li>\n<li>Server-side\n<ul>\n<li>Extracted the Chrome's V8 (JS Engine)</li>\n<li>You can run it on any machine</li>\n<li>Called Node.js</li>\n<li>You can run on the server</li>\n<li>You can run on any computer (Mac/Linux/Windows)</li>\n<li>Can't manipulate the DOM</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JS for web development\n<ul>\n<li>In web development <code>HTML</code> is the markup, <code>CSS</code> is the styling, &#x26; <code>JS</code> is the interactions</li>\n<li>There are some security measures that prevent certain things you cannot do with JS in the browser</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\">Great JS Reference MDN guide</a></li>\n<li>Each browser have their own <code>Developer Console</code></li>\n<li>For web development you can add your JS code inside of a <code>&#x3C;script>&#x3C;/script></code> tag inside of your HTML file\n<ul>\n<li>It's best to have the <code>script</code> tag at the bottom of the file so that all the elements are loaded before the JS gets executed</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>Before the script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Hello, world!'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...After the script.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>You can also provide an external script files with\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#x3C;RELATIVE_PATH><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</details>\n<details>\n<summary>Brief History</summary>\n<ul>\n<li>1995 Netscape release \"LiveScript\", then renamed to JavaScript</li>\n<li>1996 Microsoft release it's own version for IE</li>\n<li>1996 ECMA to start standardization (European Computer Manufacturers Association)</li>\n<li>In 2015 JS had a huge upgrade and we now use transpiling to convert to the older JS so that it can be used in older browsers</li>\n<li>6th Edition – ECMAScript 2015</li>\n<li>7th Edition – ECMAScript 2016</li>\n<li>8th Edition – ECMAScript 2017</li>\n<li>9th Edition – ECMAScript 2018</li>\n<li>10th Edition – ECMAScript 2019</li>\n<li>11th Edition – ECMAScript 2020</li>\n<li>Each browser comes with its own JS engine that also defines which features are actually supported</li>\n<li><a href=\"https://caniuse.com/\">caniuse</a> is a great resource to see if a feature is supported or not</li>\n<li>ECMA-Script is in active development</li>\n</ul>\n</details>\n<details>\n<summary>Data Types</summary>\n<ul>\n<li>In JavaScript there's 2 kinds of built-in types: <code>primitive</code> &#x26; <code>reference</code> types.</li>\n<li>You can use thes built-in types to make your own data structures</li>\n<li>All primitive types, except null, can be tested by the typeof operator.</li>\n<li>All primitive data types have object wrapper classes (for getting more information on properties &#x26; methods) except for <code>null</code> &#x26; <code>undefined</code></li>\n</ul>\n<h1>Data Types</h1>\n<ul>\n<li>There are 6 Built in JS <code>primitive</code> data structures (how to remember them <code>BUNS BS</code>)\n<ol>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>undefined</code></li>\n<li><code>BigInt</code></li>\n<li><code>Symbol</code></li>\n</ol>\n</li>\n<li>Structural Root Primitive\n<ol>\n<li><code>null</code> ()</li>\n</ol>\n</li>\n<li>Structural types\n<ol>\n<li><code>Object</code> (almost everything made with the <code>new</code> keyword)</li>\n</ol>\n<ul>\n<li><code>new Object</code></li>\n<li><code>new Array</code></li>\n<li><code>new Map</code></li>\n<li><code>new Set</code></li>\n<li><code>new WeakMap</code></li>\n<li><code>new WeakSet</code></li>\n<li><code>new Date</code></li>\n</ul>\n<ol start=\"2\">\n<li><code>Function</code> (non-data structure, every <code>Function</code> constructor is derived from the <code>Object</code> constructor)</li>\n</ol>\n</li>\n</ul>\n<h2>String (primitive)</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String built-in properties/methods</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Properties</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span>\n\n<span class=\"token comment\">// String build-in methods</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">at</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">substring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'someString'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Number (primitive)</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number build-in methods</a>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\nnum<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toExponential</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Boolean (primitive)</h2>\n<ul>\n<li>The Boolean object represents a truth value: true or false.</li>\n</ul>\n<h2>undefined (primitive)</h2>\n<ul>\n<li><code>undefined</code> is used to describe variables that do not point to a reference.</li>\n</ul>\n<h2>BigInt (primitive)</h2>\n<ul>\n<li>BigInt values represent numeric values which are too large to be represented by the number primitive.</li>\n</ul>\n<h2>Symbol (primitive)</h2>\n<ul>\n<li>Symbol is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that's guaranteed to be unique.</li>\n<li>More <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">here</a></li>\n</ul>\n<h2>Null (primitive)</h2>\n<ul>\n<li><code>null</code> intentional absance of a value, a variable that points to no object</li>\n<li>A representation of no value</li>\n<li>It's treated as <code>falsy</code> for boolean operations</li>\n<li>To use <code>undefined</code> or <code>null</code>?? Well, technically you can use either to get the job done, however there are times you want to use one over the other</li>\n<li>Only use null if you explicitly want to denote the value of a variable as having \"no value\".</li>\n<li>It's different to <code>undefined</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword null nil\">null</span>          <span class=\"token comment\">// \"object\" (not \"null\" for legacy reasons)</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword nil\">undefined</span>     <span class=\"token comment\">// \"undefined\"</span>\n<span class=\"token keyword null nil\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span>   <span class=\"token comment\">// false</span>\n<span class=\"token keyword null nil\">null</span>  <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span>   <span class=\"token comment\">// true</span>\n<span class=\"token keyword null nil\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword null nil\">null</span>        <span class=\"token comment\">// true</span>\n<span class=\"token keyword null nil\">null</span>  <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span>        <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token keyword null nil\">null</span>                <span class=\"token comment\">// true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// false</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n</li>\n</ul>\n<h2><code>Object</code> data type</h2>\n<ul>\n<li>The Object type represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities.</li>\n<li>Objects can be created using the Object() constructor or the object initializer / literal syntax.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">is</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isExtensible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFrozen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isSealed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventExtensions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2><code>Array</code> data type</h2>\n<ul>\n<li>The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">[</span>@@iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">at</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLastIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2><code>Map</code> data type</h2>\n<ul>\n<li>The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.</li>\n<li>More <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">here</a></li>\n</ul>\n<h2><code>Set</code> data type</h2>\n<ul>\n<li>The <code>Set</code> object lets you store unique values of any type, whether primitive values or object references.</li>\n<li>More <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">here</a></li>\n</ul>\n<h2><code>WeakMap</code> data type</h2>\n<ul>\n<li>A WeakMap is a collection of key/value pairs whose keys must be objects, with values of any arbitrary JavaScript type, and which does not create strong references to its keys.</li>\n<li>That is, an object's presence as a key in a WeakMap does not prevent the object from being garbage collected.</li>\n<li>More <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">here</a></li>\n</ul>\n<h2><code>WeakSet</code> data type</h2>\n<ul>\n<li>The WeakSet object lets you store weakly held objects in a collection.</li>\n<li>More <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">here</a></li>\n</ul>\n<h2><code>Date</code> data type</h2>\n<ul>\n<li>JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the epoch).</li>\n<li>More <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">here</a></li>\n</ul>\n</details>\n<details>\n<summary>Variables</summary>\n<ul>\n<li>The most fundamental elements of a programming language is it's set of data types</li>\n<li>Think of <code>variables</code> as a name container that you can place data into them</li>\n<li>You can then do things with the data inside the container and your can reference that data by interacting with the named variable you provided</li>\n<li>You define variable with the <code>var</code>, <code>let</code>, &#x26; <code>const</code></li>\n<li><code>var</code> is mostly being phased out because we want to use <code>let</code> &#x26; <code>const</code></li>\n<li>The scope of a variable is the region of your program in which it is defined and can be used</li>\n<li>JS has 2 scopes: <code>global</code> &#x26; <code>local</code></li>\n<li><code>global</code> scope means it can be used every where in your code as for <code>local</code> scope is only visible inside the function it was declaried in</li>\n</ul>\n</details>\n<details>\n<summary>Expressions & Operators</summary>\n<ul>\n<li>\n<p>Expressions are valid unit of code that resolves to a value</p>\n</li>\n<li>\n<p>There are 2 kinds of <code>expressions</code>:</p>\n<ul>\n<li>One's that have side effects (such as assigning a value). e.g. <code>x = 9</code> the <code>=</code> operator assigns the value to the variable</li>\n<li>One's that purely evaluate something. e.g. <code>1 + 2</code> the <code>+</code> operator add the 2 numbers together to produce <code>3</code></li>\n</ul>\n</li>\n<li>\n<p>Types of operators:</p>\n<ul>\n<li>\n<p>Assignment operators (assigns a value to its left operand based on the value of its right operand.)</p>\n</li>\n<li>\n<p>Comparison operators (compares values, <code>==</code>, <code>===</code>, <code>!==</code>, <code>></code> , <code>&#x3C;</code>)</p>\n</li>\n<li>\n<p>Arithmetic operators (takes numerical values and returns a single numeric value)</p>\n</li>\n<li>\n<p>Logical operators (<code>&#x26;&#x26;</code>,<code>||</code>, <code>!</code>)</p>\n</li>\n<li>\n<p>String operators (the concatenation operator (+) concatenates two string values together)</p>\n</li>\n<li>\n<p>Conditional (ternary) operator (<code>condition ? val1 : val2</code>)</p>\n</li>\n<li>\n<p>Comma operator (<code>for (let i = 0, j = 9; i &#x3C;= j; i++, j--) { ... }</code>)</p>\n</li>\n<li>\n<p>Unary operators (A unary operation is an operation with only one operand. e.g. <code>delete object.property;</code>, or <code>typeof someVar;</code>)</p>\n</li>\n<li>\n<p>Relational operators</p>\n</li>\n<li>\n<p>Bitwise operators</p>\n</li>\n<li>\n<p>BigInt operators</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Comparison</code> and <code>Logical</code> operators are used to test for true or false.</p>\n</li>\n<li>\n<p>Comparison Operator:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Equal to</span>\nx <span class=\"token operator\">==</span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Equal to value &#x26; type</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">8</span>\n\n\n<span class=\"token comment\">// Not equal</span>\nx <span class=\"token operator\">!=</span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Not equal to value &#x26; type</span>\nx <span class=\"token operator\">!==</span> <span class=\"token number\">8</span>\n\n<span class=\"token comment\">// Greater than</span>\nx <span class=\"token operator\">></span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Greater than or equal to</span>\nx <span class=\"token operator\">>=</span> <span class=\"token number\">8</span>\n\n<span class=\"token comment\">// Less than</span>\nx <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">8</span>\n<span class=\"token comment\">// Less than or equal to</span>\nx <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">8</span>\n</code></pre></div>\n</li>\n<li>\n<p>Logical Operators</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// And</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">8</span> <span class=\"token operator\">&#x26;&#x26;</span> x <span class=\"token operator\">===</span> <span class=\"token number\">9</span>\n<span class=\"token comment\">// Or</span>\nx <span class=\"token operator\">===</span> <span class=\"token number\">8</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token number\">9</span>\n<span class=\"token comment\">// Not</span>\n<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>\n<p>Conditional (Ternary) Operators</p>\n<ul>\n<li><code>variableName = (condition) ? value1:value2</code></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> volatile <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Is Volatile'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Is NOT Volatile'</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Control flow</summary>\n<h1>Conditional Statements (if, else if, else)</h1>\n<ul>\n<li>Conditional statements are used to decide the flow of execution based on different conditions. If a condition is true, you can perform one action and if the condition is false, you can perform another action.</li>\n<li>This is preformed with <code>if statements</code></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// statement(s)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// all options</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// statement(s)</span>\n<span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>Ternary Operator (:?)</h1>\n<ul>\n<li>Instead of having to do if/else statement on multiple lines you can do do in one command with a ternary operator</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">condition <span class=\"token operator\">?</span> expressionIfTrue <span class=\"token operator\">:</span> expressionIfFalse<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h1>switch case</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">value1</span><span class=\"token operator\">:</span>\n        statement1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">value2</span><span class=\"token operator\">:</span>\n        statement2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">value3</span><span class=\"token operator\">:</span>\n        statement3<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n        statement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>while</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// statement</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>do while</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">do</span> <span class=\"token punctuation\">{</span>\n  statement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h1>for</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>initializer<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// statements</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>break</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>continue</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1>Comma Operator</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span>\n<span class=\"token comment\">// In this example, the 10, 10+20 returns the value of the right expression, which is 10+20. Therefore, the result value is 30.</span>\n</code></pre></div>\n</details>\n<details>\n<summary>Prototype</summary>\n</details>\n<details>\n<summary>Prototypes, inheritance</summary>\n</details>\n<details>\n<summary>Classes</summary>\n</details>\n<details>\n<summary>Interaction: alert, prompt, confirm</summary>\n</details>\n<details>\n<summary></summary>\n</details>\n<details>\n<summary></summary>\n</details>\n<details>\n<summary></summary>\n</details>\n<details>\n<summary></summary>\n</details>\n<details>\n<summary></summary>\n</details>\n<details>\n<summary>Error handling</summary>\n<p>...</p>\n</details>\n<details>\n<summary>Promises, async/await</summary>\n<p>...</p>\n</details>\n<details>\n<summary>Generators, advanced iteration</summary>\n<p>...</p>\n</details>\n<details>\n<summary>Modules</summary>\n<p>...</p>\n</details>\n<details>\n<summary>Arrow Functions</summary>\n<p>...</p>\n</details>\n<details>\n<summary>Destructuring</summary>\n<p>...</p>\n</details>\n<details>\n<summary>Template literals</summary>\n<p>...</p>\n</details>\n<h1>JS Tips</h1>\n<details>\n<summary>Nullish coalescing operator '??'</summary>\n<ul>\n<li>The nullish coalescing operator is written as two question marks <code>??</code>.</li>\n<li>The result of <code>a ?? b</code> is:\n<ul>\n<li>if a is defined, then a,</li>\n<li>if a isn’t defined, then b.</li>\n</ul>\n</li>\n</ul>\n</details>\n<details>\n<summary>AND “&&” finds the first falsy value</summary>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> value1 <span class=\"token operator\">&#x26;&#x26;</span> value2 <span class=\"token operator\">&#x26;&#x26;</span> value3<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>\n<p>The AND &#x26;&#x26; operator does the following:</p>\n<ul>\n<li>Evaluates operands from left to right.</li>\n<li>For each operand, converts it to a boolean. If the result is false, stops and returns the original value of that operand.</li>\n<li>If all operands have been evaluated (i.e. all were truthy), returns the last operand.</li>\n</ul>\n</li>\n<li>\n<p>This is often used in React to conditionally show a component if the data exists:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">SomeComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"show this\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>message <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>When to use `null` or `undefined`</summary>\n<ul>\n<li>Don't define values as <code>undefined</code>, the the JS compiler automatically set it</li>\n<li>Use <code>null</code> if you intentionally want a variable to have a <code>no value</code></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Null value</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\n<span class=\"token comment\">// Define undefined value</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// Don't do this!</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre></div>\n</details>\n<details>\n<summary>`falsy` values</summary>\n<p>There are 6 falsy values:</p>\n<ul>\n<li><code>false</code></li>\n<li>0  // (zero)</li>\n<li><code>\"\"</code> // (empty string)</li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>NaN</code> // (Not A Number)</li>\n</ul>\n</details>\n<details>\n<summary>Conditionally add properties to an object</summary>\n<ul>\n<li>es6 is a better approach. But we can add a bit more sugar, by using the spread operator, and logical AND short circuit evaluation:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Avoid this</span>\n<span class=\"token keyword\">var</span> olderWay <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">someProp</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>olderWay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Nicer way</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">nonProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">tricky</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Number separators</summary>\n<ul>\n<li><code>Number separators</code> is syntactic sugar that make working with numeric constants alot easier</li>\n<li>TL;DR you can add a <code>_</code> to a numeric value to make it more readable similar to what a <code>,</code> does when viewing large numbers\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Price</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token number\">6666666</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> priceWithNumberSeparators <span class=\"token operator\">=</span> <span class=\"token number\">6_666_666</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>priceWithNumberSeparators<span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Loop over a number of times</summary>\n<ul>\n<li>Sometimes you need to loop over an array a number of time to make some data\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{\"value\":0,\"label\":0},{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3}]</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Ternary & shorthand for setting a value if true `let o = variable && 3;`</summary>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/39488458/javascript-one-line-if-only-state-true\">stackoverflow</a></p>\n</li>\n<li>\n<p>In default 'if' one line statement are two block, for true, and false:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">variable <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token literal-property property\">block</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> block<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>How declare 'if' with one block? I expect something like this: <code>variable ? true-block;</code></p>\n</li>\n<li>\n<p>You can do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">variable &#x26;amp;&#x26;amp; js-block</code></pre></div>\n</li>\n<li>\n<p>For example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> variable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> variable <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Recursive function</summary>\n<ul>\n<li>Recursive function is a function that calls itself until there is a break</li>\n<li><em>Always use caution</em> when using recursive functions cause you don't want to create an infinite loop. This is especially bad when an infinite loop happens on a server, it might cause you alot of $$$</li>\n<li>The general outline looks like this:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// stop calling itself</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">recurse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Here is an example of calling a http resource can looping thru the pages with a recursive function:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.worldbank.org/v2/country/'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getIndicatorByCountry</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">country<span class=\"token punctuation\">,</span> indicator<span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>country<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/indicator/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>indicator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&#x26;format=json</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>  \n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pages</span> <span class=\"token operator\">></span> page<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getIndicatorByCountry</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">,</span> indicator<span class=\"token punctuation\">,</span> page<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>`use strict`</summary>\n<ul>\n<li>For a long time, JavaScript evolved without compatibility issues. New features were added to the language while old functionality didn’t change.</li>\n<li>Up until 2009 (ES5) when the <code>use strict</code> was added so that new features to the language and modifications to existing one could happen</li>\n<li>JavaScript's strict mode, introduced in ECMAScript 5, is a way to opt in to a restricted variant of JavaScript</li>\n<li><code>use strict</code> is a <code>opt in</code> feature to restrict variant of JS</li>\n<li>All you have to do is to add <code>\"use strict\";</code> at the top of the JS file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this code works the modern way</span>\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n</li>\n<li>It works in most browsers, namely Firefox and Chrome.</li>\n<li>If it doesn’t, e.g. in an old browser, there’s an ugly, but reliable way to ensure use strict. Put it inside this kind of wrapper:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...your code here...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>You kinda don't have to worry about this if you are using a transpiler like babel used to write newer JS which gets converted to ES5 for builds</li>\n</ul>\n</details>\n<details>\n<summary>HTTP caching</summary>\n<ul>\n<li>Web caches reduce latency and network traffic and thus lessen the time needed to display a representation of a resource</li>\n<li>It is important to cache a resource only until it changes, not longer.</li>\n<li>There are different types of caching: browser, proxy, gateway caches, CDN, reverse proxy caches</li>\n<li>Private caches are dedicated to a single user while publish caches are meant to be shared</li>\n<li>You can control the caching with <code>cache-control</code> headers and max-age</li>\n<li>ETAG (It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed.)</li>\n</ul>\n</details>\n<h1>Web development (bundlers)</h1>\n<details>\n<summary>Webpack</summary>\n<ul>\n<li><a href=\"https://webpack.js.org/\">Webpack</a> homepage\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"></code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Vite</summary>\n<ul>\n<li><a href=\"https://vitejs.dev/\">Vite</a> homepage\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init vite@latest <span class=\"token operator\">&#x3C;</span>YOUR_APP_NAME<span class=\"token operator\">></span> -- --template react-ts\n</code></pre></div>\n</li>\n<li>Template options:\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">vanilla\nvanilla-ts\nvue\nvue-ts\nreact\nreact-ts\npreact\npreact-ts\nlit-element\nlit-element-ts\nsvelte\nsvelte-ts\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Parcel</summary>\n<ul>\n<li><a href=\"https://parceljs.org/\">Parcel</a> homepage\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i parcel-bundler\n</code></pre></div>\n</li>\n<li>Update the <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel -p 8080 watch public/index.html\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel build public/index.html\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create a <code>public/index.html</code> file\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../src/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>Create a <code>src/index.html</code> file\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">console.log(\"hello Parcel\")\n</code></pre></div>\n</li>\n<li>Add Typescript, create a <code>tsconfig.json</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Update a <code>public/index.html</code> file\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../src/index.tsx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>Create a <code>src/index.tsx</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from tsx!'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<h1>Web Frameworks</h1>\n<details>\n<summary>Nextjs</summary>\n<ul>\n<li><a href=\"https://nextjs.org/\">docs</a></li>\n</ul>\n</details>\n<details>\n<summary>Gatsby</summary>\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/\">docs</a></li>\n</ul>\n</details>\n<details>\n<summary>Create-React-App</summary>\n<ul>\n<li><a href=\"https://create-react-app.dev/\">docs</a></li>\n</ul>\n</details>\n<h1>Web Development (good practices)</h1>\n<details>\n<summary>JSDoc</summary>\n<ul>\n<li><a href=\"https://jsdoc.app/\"><code>JSDoc</code></a> is a documentation layer you can add to your source code to make it easier for others to use</li>\n<li>Why does it rock?\n<ul>\n<li>Documentation right next to the source code you are writing</li>\n<li>VSCode will use it to show you intellisence whenever you are using the functions/classes</li>\n<li>Easy to keep synced as functions/classes get updates</li>\n</ul>\n</li>\n<li><a href=\"https://jsdoc.app/about-getting-started.html\">Getting started</a></li>\n<li>Default types:\n<ul>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>boolean</code></li>\n<li><code>number</code></li>\n<li><code>string</code></li>\n<li><code>Array</code> or <code>[]</code></li>\n<li><code>Object</code> or <code>{}</code></li>\n<li>You can have a typed array: <code>any[]</code>, <code>number[]</code>, <code>string[]</code>.</li>\n<li>You could also have an array of object types: <code>Employee[]</code>.</li>\n</ul>\n</li>\n<li>How to add JSDoc comments:\n<ul>\n<li>\n<p>Simplest documentation:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/** This is a description of the foo function. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining a string parameter</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Prints a string to the console.\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">someString</span> - Some string to print to the console.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining the return value</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Example of defining a return value.\n * <span class=\"token keyword\">@return</span> void\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Example of defining a return value.\n * <span class=\"token keyword\">@return</span> string\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> someString<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining a parameter's default value</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n     * Param with a default value\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token optional-parameter\"><span class=\"token punctuation\">[</span><span class=\"token parameter\">year</span><span class=\"token punctuation\">=</span><span class=\"token code language-javascript\"><span class=\"token number\">2021</span></span><span class=\"token punctuation\">]</span></span>\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">printYear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Defining optional parameters with a <code>=</code> after the type without a space</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Define generic object.</span>\n<span class=\"token comment\">// This can have any number of properties of type any.</span>\n<span class=\"token doc-comment comment\">/**\n* <span class=\"token keyword\">@typedef</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">&#x3C;</span>string<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">></span><span class=\"token punctuation\">}</span></span> <span class=\"token class-name\">Member</span>\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">name</span> The member's name.\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">=</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">age</span> The member's age (this is optional).\n* <span class=\"token keyword\">@property</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">=</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">job</span> The member's job (this is optional).\n*/</span>\n<span class=\"token doc-comment comment\">/**\n* <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Member<span class=\"token punctuation\">}</span></span> Jack\n*/</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Jack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">28</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Define an Union type</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">}</span></span> value The value of the product.\n */</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token comment\">// or '12'</span>\n</code></pre></div>\n</li>\n<li>\n<p>Define a Intersection type</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n */</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Joe'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">32</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Auto generate documentation for the JSDoc comments</h2>\n<ul>\n<li>Now when you use this function/class in your code we should have VSCode intellisense with the description/params/return value</li>\n<li>JavaScript With <a href=\"https://www.npmjs.com/package/jsdoc\">JSDoc</a>: generating the docs\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> i jsdoc --save-dev\n$ ./node_modules/.bin/jsdoc src/somefile.js \n</code></pre></div>\n</li>\n</ul>\n<h2>Add Types to JSDoc</h2>\n<ul>\n<li>\n<p>Setup VSCode add to your <code>.vscode/settings.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"javascript.implicitProjectConfig.checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>With plain JavaScript this will give you some basic IntelliSense and flag type errors with red squiggles underneath</p>\n</li>\n<li>\n<p>You can have VSCode check a single file on/off by adding <code>// @ts-check</code> at the top of the file or <code>// @ts-nocheck</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token comment\">// The TypeScript engine will check all JavaScript in this file.</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-nocheck</span>\n<span class=\"token comment\">// The TypeScript engine will not check this file.</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can also disable a line or block of code by adding <code>// @ts-ignore</code></p>\n</li>\n</ul>\n</details>\n<details>\n<summary>Babel</summary>\n<h1>Babel 6</h1>\n<ul>\n<li>Add some dependencies\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D babel-cli@6 babel-preset-env @babel/core@6\n$ <span class=\"token function\">npm</span> i express\n</code></pre></div>\n</li>\n<li>Create a <code>.babelrc</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add some script to your <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create <code>src/index.js</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">express</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Express\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all other routes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...The magic happens at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Babel 7</h1>\n<ul>\n<li>Add some dependencies\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D @babel/node@7 @babel/preset-env@7 @babel/cli@7 @babel/core@7\n$ <span class=\"token function\">npm</span> i express\n</code></pre></div>\n</li>\n<li>Create a <code>.babelrc</code>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"esmodules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n</li>\n<li>Add some script to your <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Create <code>src/index.js</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">express</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Express\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all other routes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...The magic happens at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Babel 7 for React App</h1>\n<ol>\n<li>Setup</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> -p src\n$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D @babel/core @babel/preset-env @babel/preset-react babel-loader file-loader css-loader style-loader webpack webpack-cli html-webpack-plugin webpack-dev-server\n</code></pre></div>\n<ol start=\"2\">\n<li>Add Babel</li>\n</ol>\n<ul>\n<li>Add a <code>.babelrc</code> file in the root of your site\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@babel/preset-react\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Add Webpack</li>\n</ol>\n<ul>\n<li>Update your package.json\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --mode development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Add a <code>./webpack.config.js</code> files\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">HtmlWebpackPlugin</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Where files should be sent once they are bundled</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.bundle.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// webpack 5 comes with devServer which loads in development mode</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">watchContentBase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Rules of how webpack will take our files, complie &#x26; bundle them for the browser</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span><span class=\"token group punctuation\">(</span>js<span class=\"token alternation keyword\">|</span>jsx<span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">nodeModules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>css<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/index.html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Ready to make your react site!</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ npm i react react-dom\n$ touch src/index.html &#x26;amp;&#x26;amp; touch src/index.js</code></pre></div>\n<ul>\n<li>\n<p><code>./src/index.html</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>title</span><span class=\"token punctuation\">></span></span>React Webpack App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n</li>\n<li>\n<p><code>./src/index.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDom</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./App\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">\"./App.css\"</span>\n\n<span class=\"token maybe-class-name\">ReactDom</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>\n<p><code>./src/App.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h2<span class=\"token operator\">></span><span class=\"token maybe-class-name\">Welcome</span> to <span class=\"token maybe-class-name\">React</span> <span class=\"token maybe-class-name\">App</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h3<span class=\"token operator\">></span><span class=\"token known-class-name class-name\">Date</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p><code>./src/App.css</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h2</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">teal</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<h1>To complete</h1>\n<details>\n<summary>To do</summary>\n<ul>\n<li>Interaction: alert, prompt, confirm</li>\n<li>Type conversions</li>\n<li>Array &#x26; Array methods</li>\n<li>Object &#x26; Object Method</li>\n<li>Basic operators</li>\n<li>Comparisons</li>\n<li>Conditionals</li>\n<li>Logical operations</li>\n<li>Advanced working with functions</li>\n<li>Prototype</li>\n<li>Prototypes, inheritance</li>\n<li>Classes</li>\n<li>Error handling</li>\n<li>Promises, async/await</li>\n<li>Generators, advanced iteration</li>\n<li>Modules</li>\n<li>Arrow Functions</li>\n<li>Destructuring</li>\n<li>Template literals</li>\n<li>How the web works</li>\n<li>npm scripts &#x26; package.json</li>\n<li>husky &#x26; nvm versions</li>\n<li>sessions, cookies, &#x26; jwt</li>\n<li>HTTP caching</li>\n<li>OAuth</li>\n<li>Security\n<ul>\n<li>CSRF attack</li>\n<li>SQL injection</li>\n<li>CORS</li>\n</ul>\n</li>\n<li>Testing\n<ul>\n<li>mocks</li>\n<li>stubs</li>\n<li>spies</li>\n</ul>\n</li>\n<li>Closures</li>\n<li>Hoisting</li>\n<li>Immutability</li>\n<li>Data types</li>\n<li>DOM</li>\n<li>Global &#x26; Local Scope</li>\n<li>Operators</li>\n<li>Undefined, null, &#x26; NaN</li>\n<li>logical operations</li>\n<li>Try/Catch block</li>\n<li>How to throw errors</li>\n<li>Error handling</li>\n<li>strict mode</li>\n<li>parameter vs arguments</li>\n<li>Functions vs Methods</li>\n<li>anonymous functions</li>\n<li>\"this\"</li>\n<li>bind</li>\n<li>Class</li>\n<li>Class inheritance</li>\n<li>recursion</li>\n<li>closures</li>\n<li>pure function</li>\n<li>side effects</li>\n<li>traverse the DOM</li>\n<li>sets</li>\n<li>symbols</li>\n<li>spread operator</li>\n<li>object.assign</li>\n<li>virtual DOM (how does react work with it)</li>\n<li>package managers</li>\n<li>Web APIs Specifications\n<ul>\n<li>Background Fetch API</li>\n<li>Clipboard API</li>\n<li>Console API</li>\n<li>Geolocation API</li>\n<li>HTML Drag and Drop API</li>\n<li>History API</li>\n<li>IndexedDB</li>\n<li>Service Workers API</li>\n<li>Storage</li>\n<li>URL API</li>\n<li>Web Crypto API</li>\n<li>Web Storage API</li>\n<li>Websockets API</li>\n<li>XMLHttpRequest</li>\n</ul>\n</li>\n<li>Web APIs Interfaces\n<ul>\n<li>AbortController</li>\n</ul>\n</li>\n<li>How does React's Virtual DOM work</li>\n<li>How does Redux work</li>\n<li>When to use a stateful or stateless component in react</li>\n<li>When to use React's internal state versus Redux</li>\n<li>Variable hoisting</li>\n<li>What are promises (3 states of a promise fulfilled/rejected/pending)</li>\n<li>Promises &#x26; async/await</li>\n<li>HTTP methods</li>\n<li>Http status code</li>\n<li>CORS</li>\n<li>JSONP</li>\n<li>HTTP caching</li>\n<li>debounce</li>\n<li>closure (What is the difference between lexical scoping and closures)</li>\n<li>web sockets</li>\n<li>Server Sent Events</li>\n<li>What is the benefits of using async/await to promises (cleaner, try/catch blocks catch exception, callback is</li>\n<li>testing frameworks</li>\n<li>folder structure for server/client/package</li>\n<li>Loop over a number of times</li>\n<li>Ternary &#x26; shorthand for setting a value if true <code>let o = variable &#x26;&#x26; 3;</code></li>\n<li>Recursive function</li>\n<li><code>use strict</code></li>\n<li>OAuth</li>\n<li>Security\n<ul>\n<li>CSRF attack</li>\n<li>SQL injection</li>\n<li>CORS</li>\n</ul>\n</li>\n<li>Testing\n<ul>\n<li>mocks</li>\n<li>stubs</li>\n<li>spies</li>\n</ul>\n</li>\n<li>Closures</li>\n<li>Hoisting</li>\n<li>Immutability</li>\n<li>Data types</li>\n<li>DOM</li>\n<li>Global &#x26; Local Scope</li>\n<li>Operators</li>\n<li>Undefined, null, &#x26; NaN</li>\n<li>logical operations</li>\n<li>Try/Catch block</li>\n<li>How to throw errors</li>\n<li>Error handling</li>\n<li>strict mode</li>\n<li>parameter vs arguments</li>\n<li>Functions vs Methods</li>\n<li>anonymous functions</li>\n<li>\"this\"</li>\n<li>bind</li>\n<li>Class</li>\n<li>Class inheritance</li>\n<li>recursion</li>\n<li>closures</li>\n<li>pure function</li>\n<li>side effects</li>\n<li>traverse the DOM</li>\n<li>sets</li>\n<li>symbols</li>\n<li>spread operator</li>\n<li>object.assign</li>\n<li>virtual DOM (how does react work with it)</li>\n<li>Package managers</li>\n<li>Web APIs Specifications &#x26; Interfaces</li>\n<li>There are a large number of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#interfaces\">Web APIs available.</a>\n<ul>\n<li>Background Fetch API</li>\n<li>Clipboard API</li>\n<li>Console API</li>\n<li>Geolocation API</li>\n<li>HTML Drag and Drop API</li>\n<li>History API</li>\n<li>IndexedDB</li>\n<li>Service Workers API</li>\n<li>Storage</li>\n<li>URL API</li>\n<li>Web Crypto API</li>\n<li>Web Storage API</li>\n<li>Websockets API</li>\n<li>XMLHttpRequest</li>\n<li>AbortController</li>\n<li>AbortController</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortController</a></li>\n</ul>\n</li>\n<li>How does React's Virtual DOM work</li>\n<li>How does Redux work</li>\n<li>When to use a stateful or stateless component in react</li>\n<li>When to use React's internal state versus Redux</li>\n<li>Variable hoisting</li>\n<li>What are promises (3 states of a promise fullified/rejected/pending)</li>\n<li>Promises &#x26; async/await</li>\n<li>HTTP methods</li>\n<li>Http status code</li>\n<li>CORS</li>\n<li>JSONP</li>\n<li>HTTP caching</li>\n<li>debounce</li>\n<li>closure (What is the difference between lexical scoping and closures)</li>\n<li>web sockets</li>\n<li>Server Sent Events</li>\n<li>What is the benefits of using async/await to promises (cleaner, try/catch blocks catch exception, callback is cleaner, debugging)</li>\n<li>Testing frameworks</li>\n<li>Folder structure for server/client/package</li>\n</ul>\n</details>\n","ogImage":{"url":"/assets/covers/js.jpg"},"coverImage":"/assets/covers/js.jpg"}},"__N_SSG":true}