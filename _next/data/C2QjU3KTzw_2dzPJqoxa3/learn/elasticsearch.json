{"pageProps":{"post":{"title":"elasticsearch","slug":"elasticsearch","content":"<h1>What is ElasticSearch</h1>\n<ul>\n<li>Initially released in 2010, Elasticsearch (ES) which is based on Apache Lucene</li>\n<li>It's a NoSQL Database, which means you store data in an unstructed way</li>\n<li>It's open source, &#x26; build with Java</li>\n<li>Most of the time you don't just use Elasticsearch by itself, you use the ELK Stack (Elasticsearch, Logstash and Kibana)</li>\n<li>It's Fast, relevant data</li>\n</ul>\n<h2>ElasticSearch stack</h2>\n<ul>\n<li>ElastsicSearch: Store, search, &#x26;  analyze data</li>\n<li>Kibana: a web interface to searc, view, interact</li>\n<li>Logstash: ingest data</li>\n</ul>\n<h1>Basic Architecture</h1>\n<p><img src=\"/assets/blog/elasticsearch/elastic-arhitecture.jpg\" alt=\"elastic-arhitecture\"></p>\n<ul>\n<li>A <code>Cluster</code> can be >=1 <code>nodes</code> (nodes are distributed across multiple machines, each node as an <code>id</code> and a unique <code>name</code>) and work together to accomplish a task</li>\n<li>Data is stored a JSON objects</li>\n<li>Data is stored as JSON documents</li>\n<li>Similar objects are grouped together in an <code>index</code>. e.g. user's <code>index</code> will contain user documents</li>\n<li><code>Index</code> is not actually storing the data, it just keeps track of where the data is stored on each <code>node</code></li>\n<li>A <code>shard</code> is was exist on the disk</li>\n<li>When you create an index you get 1 shard by default, you can configure it so it creates an index with multiple shards that are distributed across nodes, called \"sharding\"</li>\n<li>So data is stored in a shard, and it's capacity is dependent on the size of the node</li>\n<li>You can add more/less shards as the data changes, you can horizontally scale to adapt to increasing data</li>\n<li>You also run search queries on shards</li>\n<li><strong>The power of multiple shards</strong> is that you can query in parallel multiple shards to get your answer faster.</li>\n<li>Example:\n<ul>\n<li>1 shard with 50k might take ~10 seconds\n<img src=\"/assets/blog/elasticsearch/50k-1-shard.jpg\" alt=\"50k-1-shard.\"></li>\n<li>Same query with 10 shards with 5k each should take 1 second!!\n<img src=\"/assets/blog/elasticsearch/50k-10-shards.jpg\" alt=\"50k-10-shards\"></li>\n</ul>\n</li>\n<li>You can run a query on multiple shards to get the answer faster</li>\n<li>You can also replate shards on different nodes for redunancy (Primary Shard &#x26; Replica Shards)</li>\n</ul>\n<h1>Installing ES</h1>\n<ul>\n<li>There's multiple options to work with ES\n<ul>\n<li><em>I would avoid this</em> Install it directly on your machine (make sure you have Java installed)</li>\n<li>Using Docker or Docker Compose</li>\n<li>Cloud service</li>\n</ul>\n</li>\n</ul>\n<h2>Via Docker</h2>\n<ul>\n<li>He's a simple DockerCompose file <code>docker-compose.yml</code>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">version: <span class=\"token string\">'3.7'</span>\nservices:\n\n  <span class=\"token comment\"># Elasticsearch Docker Images: https://www.docker.elastic.co/</span>\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0\n    container_name: elasticsearch\n    environment:\n      - xpack.security.enabled<span class=\"token operator\">=</span>false\n      - discovery.type<span class=\"token operator\">=</span>single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: <span class=\"token number\">65536</span>\n        hard: <span class=\"token number\">65536</span>\n    cap_add:\n      - IPC_LOCK\n    volumes:\n      - elasticsearch-data:/usr/share/elasticsearch/data\n    ports:\n      - <span class=\"token number\">9200</span>:9200\n      - <span class=\"token number\">9300</span>:9300\n\n  kibana:\n    container_name: kibana\n    image: docker.elastic.co/kibana/kibana:7.4.0\n    environment:\n      - <span class=\"token assign-left variable\">ELASTICSEARCH_HOSTS</span><span class=\"token operator\">=</span>http://elasticsearch:9200\n    ports:\n      - <span class=\"token number\">5601</span>:5601\n    depends_on:\n      - elasticsearch\n\nvolumes:\n  elasticsearch-data:\n    driver: <span class=\"token builtin class-name\">local</span>\n</code></pre></div>\n</li>\n<li>Run it\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Run it in the background</span>\n$ <span class=\"token function\">docker</span> compose up -d\n\n<span class=\"token comment\"># keep the shell open</span>\n$ <span class=\"token function\">docker</span> compose -f docker-compose.yml up \n\n<span class=\"token comment\"># Stop the containers</span>\n$ <span class=\"token function\">docker</span> compose down\n\n<span class=\"token comment\"># Stop and remove the volume</span>\n$ <span class=\"token function\">docker</span> compose down -v\n</code></pre></div>\n</li>\n</ul>\n<h1>Ways to work with the Elasticsearch Database</h1>\n<h2>Curl</h2>\n<h2>Http</h2>\n<h2>node.js library</h2>\n<h2>Kibana Console</h2>\n<ul>\n<li><a href=\"http://localhost:5601/app/kibana\">localhost 5601</a></li>\n<li>On the left-side bar click on the <code>Dev Tools</code> the wrench icon\n<img src=\"/assets/blog/elasticsearch/devtools.jpg\" alt=\"devtools\"></li>\n</ul>\n<h3>Get information of the cluster</h3>\n<ul>\n<li>Getting information about your ElasticSearch cluster/nodes you can use some keywords that start with <code>_</code>\n<div class=\"remark-highlight\"><pre class=\"language-http\"><code class=\"language-http\">GET _cluster/health\nGET _nodes/stats\n</code></pre></div>\n</li>\n<li>Creating an index is really easy all you have to do is <code>PUT &#x3C;INDEX-NAME></code>\n<div class=\"remark-highlight\"><pre class=\"language-http\"><code class=\"language-http\">PUT favorite_candy\n</code></pre></div>\n</li>\n<li>If the index was create properly you should get:\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"acknowledged\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"shards_acknowledged\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"index\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"favorite_candy\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>When creating a document you can use both <code>POST</code> &#x26; <code>PUT</code></li>\n<li>Use <code>POST</code> if you want ElasticSeach to autogenerate an id for your document\n<div class=\"remark-highlight\"><pre class=\"language-http\"><code class=\"language-http\">POST &#x3C;INDEX_NAME>/_doc\n{\n  \"field\": \"value\"\n}\n</code></pre></div>\n</li>\n<li>Return value something like\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"_index\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"favorite_candy\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"_type\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Cm1uXYYBeJQqzgDkslP7\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"_version\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"result\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"created\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"_shards\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"total\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"successful\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"failed\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"_seq_no\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"_primary_term\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Use <code>PUT</code> if you want to define the id for the document\n<div class=\"remark-highlight\"><pre class=\"language-http\"><code class=\"language-http\">PUT &#x3C;INDEX_NAME>/_doc/1\n{\n  \"field\": \"value\"\n}\n</code></pre></div>\n</li>\n</ul>\n<p>GET quotes/_search\n{\n\"query\": {\n\"match_all\": {}\n}\n}</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">\n\n\n\n\n\n\n\n\n\n# Working with the Elasticsearch via CRUD\n\n\n\n\n\n\n\n# DSL (Domain Specific Language)\nDSL stands for Domain Specific Language. In Elasticsearch, the DSL refers to a JSON-based query language that is used to interact with Elasticsearch. \n- The DSL provides a way to define and execute various types of queries and aggregations against an Elasticsearch index. \n- It is a powerful tool that allows you to filter, sort, and manipulate large amounts of data with a high degree of flexibility and precision. \n- The DSL includes a wide range of query types, including full-text search, term-level queries, geo-spatial queries, and more. It also allows you to perform complex aggregations, such as grouping and statistical analysis, to extract meaningful insights from your data.\n\n\n\n\n- Query DSL\n- Filters vs. Queries\n- Scoring\n\n\n\n\n# Preform CRUD opperations \n\n\n# URI Search\n\n\n# Nodejs CRUD\n\n\n# \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre></div>\n","ogImage":{"url":"/assets/covers/elasticsearch.jpg"},"coverImage":"/assets/covers/elasticsearch.jpg"}},"__N_SSG":true}