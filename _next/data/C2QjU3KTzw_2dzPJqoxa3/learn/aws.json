{"pageProps":{"post":{"title":"aws","slug":"aws","content":"<details>\n<summary>AWS CLI</summary>\n<ul>\n<li>Installing the AWS CLI <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\">Docs here</a></li>\n<li>For macOS <a href=\"https://awscli.amazonaws.com/AWSCLIV2.pkg\">download</a>\n<ul>\n<li>You can install to any folder, or choose the recommended default folder of <code>/usr/local/aws-cli</code>.</li>\n<li>The installer automatically creates a symlink at <code>/usr/local/bin/aws</code> that links to the main program in the installation folder you chose.</li>\n</ul>\n</li>\n<li>Check to see if it's installed properly\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">which</span> aws\n/usr/local/bin/aws \n$ aws --version\naws-cli/2.4.5 Python/3.8.8 Darwin/18.7.0 botocore/2.4.5\n</code></pre></div>\n</li>\n<li>You can access your AWS services via (<a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html\">more on profiles here</a>):\n<ol>\n<li>Named profiles</li>\n</ol>\n<ul>\n<li>\n<p>AWS uses <code>~./aws/credentials</code> file for accessing your AWS accounts where you can have multiple profiles but you should probably have a <code>default</code> profile</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>default<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">aws_access_key_id</span><span class=\"token operator\">=</span>AAAAAAAAAAAAAEXAMPLE\n<span class=\"token assign-left variable\">aws_secret_access_key</span><span class=\"token operator\">=</span><span class=\"token number\">123456789123456789</span>\n\n<span class=\"token punctuation\">[</span>user1<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">aws_access_key_id</span><span class=\"token operator\">=</span>BBBBBBBBBBBBBEXAMPLE\n<span class=\"token assign-left variable\">aws_secret_access_key</span><span class=\"token operator\">=</span><span class=\"token number\">12345678923456789</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can also define the default regions for each profile in <code>~/.aws/config</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>default<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">region</span><span class=\"token operator\">=</span>us-west-2\n<span class=\"token assign-left variable\">output</span><span class=\"token operator\">=</span>json\n\n<span class=\"token punctuation\">[</span>profile user1<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">region</span><span class=\"token operator\">=</span>us-east-1\n<span class=\"token assign-left variable\">output</span><span class=\"token operator\">=</span>text\n</code></pre></div>\n</li>\n<li>\n<p>List profiles</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ aws configure list-profiles\n$ aws configure list\n</code></pre></div>\n</li>\n<li>\n<p>Accessing a specific profile's resources you just have to pass in the <code>--profile &#x3C;PROFILE_NAME></code></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ aws s3 <span class=\"token function\">ls</span> --profile default\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Environment variables</li>\n</ol>\n<ul>\n<li>You can also pass in environment variables access key/secrets\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span>BBBBBBBBBBBBBEXAMPLE\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span><span class=\"token number\">12345678923456789</span>\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_DEFAULT_REGION</span><span class=\"token operator\">=</span>us-west-2\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>Now, getting your <code>AWS_ACCESS_KEY_ID</code> &#x26; <code>AWS_SECRET_ACCESS_KEY</code> values\n<ol>\n<li>Go to Amazon Web Services console and click on the name of your account (it is located in the top right corner of the console). Then, in the expanded drop-down list, select <code>Security Credentials</code>.\n<img src=\"/assets/blog/aws/credentials_1.jpg\" alt=\"Security Page\"></li>\n<li>Click the <code>Access keys (access key ID and secret access key)</code> accordion title and click <code>Create New Access Key</code>\n<img src=\"/assets/blog/aws/credentials_2.jpg\" alt=\"Security Page\"></li>\n<li>Click <code>Show Access Key</code> to have it displayed on the screen. Note, that you can download it to your machine as a file and open it whenever needed. To download it, just click the <code>Download Key File</code> button.\n<img src=\"/assets/blog/aws/credentials_2.jpg\" alt=\"Security Page\"></li>\n<li>Now update your <code>~/.aws/credentials</code> file with this key pair</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span>default<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">aws_access_key_id</span><span class=\"token operator\">=</span>AAAAAAAAAAAAAEXAMPLE\n<span class=\"token assign-left variable\">aws_secret_access_key</span><span class=\"token operator\">=</span><span class=\"token number\">123456789123456789</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>S3</summary>\n- AWS Lambda provides various ways to access secrets or sensitive data securely. Here are a few of the most common methods:\n<ol>\n<li>\n<p><code>AWS Systems Manager Parameter Store</code>: This is a managed service that lets you store and retrieve secrets, such as database credentials and API keys. You can access the secrets in a Lambda function by using the AWS Systems Manager API, AWS CLI, or SDK.</p>\n</li>\n<li>\n<p><code>AWS Secrets Manager</code>: This is a fully managed service that enables you to store, rotate, and retrieve secrets securely. You can access the secrets in a Lambda function by using the AWS Secrets Manager API, AWS CLI, or SDK.</p>\n</li>\n<li>\n<p><code>Environment Variables</code>: You can store secrets as environment variables in a Lambda function. These secrets are encrypted and protected by the Lambda service-linked role.</p>\n</li>\n<li>\n<p><code>IAM Role</code>: You can assign an IAM role to a Lambda function that has permissions to access the secrets. For example, you can assign a role that has read-only access to the secrets stored in AWS Secrets Manager or the AWS Systems Manager Parameter Store.</p>\n</li>\n</ol>\n<ul>\n<li>Regardless of the method you choose, it's important to ensure that the secrets are stored securely and protected from unauthorized access. You should also consider rotating the secrets on a regular basis and limiting the permissions of the roles and services that access the secrets.</li>\n</ul>\n</details>\n<details>\n<summary>IAM</summary>\n<h1>IAM (Identity and Access Management)</h1>\n<ul>\n<li><code>AWS IAM</code> is a web service that helps you securely control access to AWS resources. IAM enables you to manage users, groups, and permissions to AWS resources. With IAM, you can create and manage AWS users and groups, and use permissions to allow and deny access to AWS resources.</li>\n<li>An <code>AWS policy </code>is a document that defines one or more permissions. AWS policies are written in JSON and specify the actions that a user, group, or role is allowed or denied to perform on AWS resources. For example, you can create a policy that allows a user to perform only read operations on Amazon S3 buckets, or a policy that allows a group to launch EC2 instances.</li>\n<li>Policies can be attached to AWS users, groups, or roles. When a policy is attached to a user, it defines what that user can do in the AWS environment. When a policy is attached to a group, it defines the permissions for all users in that group. When a policy is attached to a role, it defines the permissions for applications or services that assume the role.</li>\n<li>AWS provides a number of managed policies that you can use as building blocks for your policies. For example, the AmazonS3ReadOnlyAccess policy provides read-only access to Amazon S3 buckets. You can also create custom policies, either by creating a new policy from scratch or by modifying an existing policy.</li>\n<li>Here's an example of a simple AWS policy to allow read access to an Amazon S3 bucket:\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"s3:GetObject\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"s3:ListBucket\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"arn:aws:s3:::&#x3C;YOUR_BUCKET_NAME>\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"arn:aws:s3:::&#x3C;YOUR_BUCKET_NAME>/*\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>This policy uses the \"Effect\" of \"Allow\" to specify that the policy allows read access to the S3 bucket. The \"Action\" section lists the specific S3 actions that are allowed (s3:GetObject and s3:ListBucket), and the \"Resource\" section specifies the ARN (Amazon Resource Name) of the S3 bucket and its contents (&#x3C;YOUR_BUCKET_NAME> and &#x3C;YOUR_BUCKET_NAME>/*).</li>\n<li>Note that in the &#x3C;YOUR_BUCKET_NAME> placeholder in the ARN, you would replace it with the actual name of the S3 bucket you want to grant read access to.</li>\n<li>You can attach this policy to an IAM user, group, or role to grant read access to the specified S3 bucket.</li>\n</ul>\n</details>\n<details>\n<summary>S3</summary>\n<h1>S3</h1>\n<ul>\n<li>Storage</li>\n</ul>\n</details>\n<details>\n<summary>CloudWatch</summary>\n<h1>CloudWatch</h1>\n<ul>\n<li>CloudWatch enables you to monitor your complete stack (applications, infrastructure, network, and services) and use alarms, logs, and events data to take automated actions and reduce mean time to resolution (MTTR). This frees up important resources and allows you to focus on building applications and business value.</li>\n<li>You can create Dashboards, Alarms, or just query the logs</li>\n</ul>\n<h2>Logs</h2>\n<ul>\n<li>You have 2 options: <code>Log Goups</code> or <code>Log Insights</code></li>\n<li><code>Log Insights</code> is better</li>\n<li>Select a log group(s) then run a query\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">fields @timestamp, @message, @logStream, @log\n| sort @timestamp desc\n| limit 20</code></pre></div>\n</li>\n<li>Allowed filtering options are:\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\">'in', 'and', 'or', 'not', 'like', '=~', '~=', '|', '|>', '^', '*', '/', '%', '+', '-', '<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>',</span> <span class=\"token attr-name\">'</span><span class=\"token punctuation\">></span></span>', '&#x3C;=', '>=', '=', '!='\n</code></pre></div>\n</li>\n<li>You can also regex console.log event you've done in your Lambdas like:\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">fields @timestamp, @message, @logStream, @log\n| sort @timestamp desc\n| filter @message like /????/\n| limit 20</code></pre></div>\n</li>\n<li>Learn more about queries <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax-examples.html\">here</a></li>\n</ul>\n</details>\n<details>\n<summary>CLoudFront</summary>\n<h1>CLoudFront</h1>\n<ul>\n<li>Distribute your static content at AWS edge locations</li>\n</ul>\n</details>\n<details>\n<summary>ACM</summary>\n<h1>ACM</h1>\n<ul>\n<li>AWS Certificate Manager is a service provided by Amazon that issues on-demand TLS certificates at no cost. Much like Let’s Encrypt, Amazon controls the Certificate Authority (Amazon Trust Services, LLC) behind the certificates, as well as the accompanying API to manage them.</li>\n<li>Amazon Certificate Manager (ACM) provides an elegant wayt to convert  a cumbersome multi-step process (the process of provisioning, validating, and configuring Transport Layer Security (TLS) certificates) into a single step</li>\n<li>ACM certificates can only be associated with AWS Elastic and Application Load Balancers, CloudFront distributions, and API Gateway endpoints.</li>\n</ul>\n</details>\n<details>\n<summary>Route53</summary>\n<h1>Route53</h1>\n<ul>\n<li>Route end users to your site reliably with globally-dispersed Domain Name System (DNS) servers and automatic scaling.</li>\n</ul>\n</details>\n<details>\n<summary>API Gateway</summary>\n<h1>API Gateway</h1>\n<ul>\n<li>\n<p>Allows you to make RESTful applications</p>\n</li>\n<li>\n<p>There's 4 types of API Gateway offering:</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html\">HTTP API</a></li>\n<li><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html\">REST API</a></li>\n<li>REST API (private)</li>\n<li>WebSocket API</li>\n</ul>\n</li>\n<li>\n<p><code>REST APIs </code>support more features than <code>HTTP APIs</code>, while <code>HTTP APIs</code> are designed with minimal features so that they can be offered at a lower price. You can read more <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html\">here</a></p>\n</li>\n<li>\n<p>When you add a new endpoint you have to create a <code>resource</code> then add the http <code>methods</code> you want</p>\n</li>\n</ul>\n<h2>Custom Authorizer</h2>\n<ul>\n<li>\n<p><a href=\"https://www.alexdebrie.com/posts/lambda-custom-authorizers/\">Here's a great writeup on Lambda Custom Authorizers</a></p>\n</li>\n<li>\n<p>API Gateway provides an HTTP API endpoint that is fully configurable. You define the HTTP resources (like /user), the HTTP methods on that resources (like POST, GET, DELETE, …) and the integration (e.g. Lambda function) that should be called to process the request. A Lambda function can then run whatever logic is needed to answer the request. The Lambda function returns its result to the API Gateway. The API Gateway responds to the caller. The following figure demonstrates this flow.\n<img src=\"/assets/blog/aws/api-gateway-flow.jpg\" alt=\"api-gateway-flow\"></p>\n</li>\n<li>\n<p>You could include the authentication and authorization logic into the Lambda function that handles the request. But you can also separate concerns, make use of API Gateway caching mechanism, and go for Custom Authorization. API Gateway will invoke another Lambda function (Auth Lambda Function) for the first request and caches that result for a configurable duration. Caching will reduce the overhead (latency and DynamoDB charges) for authentication and authorization to a minimum.\n<img src=\"/assets/blog/aws/api-gateway-flow_custom-authorizer.jpg\" alt=\"api-gateway-flow_custom-authorizer\"></p>\n</li>\n<li>\n<p>You can use whatever logic you like to decide if a request is allowed or not. Here I will implement an API token mechanism. All HTTP requests from clients must pass an Authorization: xyz header. The Auth Lambda Function will take this token to query a DynamoDB table. The request is allowed or denied depending on if the query matches.</p>\n</li>\n<li>\n<p>The code for the Auth Lambda Function is responsible for looking up the token. The Authorization HTTP header field is used to transmit the token. You can use Node.js and the AWS SDK for JavaScript to implement this logic. API Gateway will pass an event to our function like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"authorizationToken\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"&#x3C;caller-supplied-token>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"methodArn\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"arn:aws:execute-api:&#x3C;regionId>:&#x3C;accountId>:&#x3C;apiId>/&#x3C;stage>/&#x3C;method>/&#x3C;resourcePath>\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>API Gateway expects that we respond in the following way:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"principalId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"policyDocument\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"execute-api:Invoke\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or Deny</span>\n        <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:execute-api:&#x3C;regionId>:&#x3C;accountId>:&#x3C;apiId>/&#x3C;stage>/&#x3C;method>/&#x3C;resourcePath>\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>A simple implementation looks like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dynamodb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">generatePolicy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">principalId<span class=\"token punctuation\">,</span> effect<span class=\"token punctuation\">,</span> resource</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'principalId'</span><span class=\"token operator\">:</span> principalId<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'policyDocument'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'Version'</span><span class=\"token operator\">:</span> <span class=\"token string\">'2012-10-17'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">'Statement'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'Action'</span><span class=\"token operator\">:</span> <span class=\"token string\">'execute-api:Invoke'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'Effect'</span><span class=\"token operator\">:</span> effect<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'Resource'</span><span class=\"token operator\">:</span> resource\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">authorizationToken</span><span class=\"token punctuation\">;</span>\n  dynamodb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"Key\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"token\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"S\"</span><span class=\"token operator\">:</span> token<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"TableName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auth-token\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Item</span></span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">generatePolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Deny'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">methodArn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">generatePolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Allow'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">methodArn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>More on Lambda authorizer <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\">here</a></p>\n</li>\n</ul>\n</details>\n<details>\n<summary>Lambda</summary>\n<h1>Lambda</h1>\n<ul>\n<li>Serverless functions</li>\n</ul>\n</details>\n<details>\n<summary>Elastic Container Registry (ECR) </summary>\n<h1>ECR</h1>\n<ul>\n<li>ECR is your own Docker repository where you can push images up to your AWS account</li>\n<li>Lets create a simple registry and add a docker container\n<ol>\n<li>Create a Node.js application e.g. <code>$ yarn create nest</code></li>\n<li>Create a docker file, <code>./Dockerfile</code></li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">FROM node:18-alpine\nWORKDIR /user/src/app\nCOPY <span class=\"token builtin class-name\">.</span> <span class=\"token builtin class-name\">.</span>\nRUN <span class=\"token function\">rm</span> -rf node_modules <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">yarn</span> <span class=\"token function\">install</span> --frozen-lockfile\nRUN <span class=\"token function\">yarn</span> build\n<span class=\"token environment constant\">USER</span> <span class=\"token function\">node</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"run\"</span>, <span class=\"token string\">\"start:prod\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Create the AWS ECR</li>\n</ol>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html\">AWS Docs</a>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">REPO_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"meee/nestjs-api\"</span>\n<span class=\"token assign-left variable\">AWS_REGION</span><span class=\"token operator\">=</span><span class=\"token string\">\"us-west-2\"</span>\naws ecr create-repository <span class=\"token punctuation\">\\</span>\n    --repository-name <span class=\"token variable\">$REPO_NAME</span> <span class=\"token punctuation\">\\</span>\n    --image-scanning-configuration <span class=\"token assign-left variable\">scanOnPush</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n    --region <span class=\"token variable\">$AWS_REGION</span>\n</code></pre></div>\n</li>\n<li>Or with Terraform\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">provider<span class=\"token type variable\"> \"aws\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">region</span>  <span class=\"token punctuation\">=</span> <span class=\"token string\">\"us-west-2\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">terraform</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">required_providers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">aws</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">source</span>  <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hashicorp/aws\"</span>\n      <span class=\"token property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"~> 4.16\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token property\">required_version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\">= 1.0.10\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"ecr_registry_name\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">type</span> <span class=\"token punctuation\">=</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecr_repository\"</span></span> <span class=\"token string\">\"ecr_repo\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span> <span class=\"token punctuation\">=</span> var.ecr_registry_name\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Create a build/deploy script</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Variables</span>\n<span class=\"token assign-left variable\">IMAGE_TAG</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">node</span> -p -e <span class=\"token string\">\"require('./package.json').version\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">AWS_REGION</span><span class=\"token operator\">=</span><span class=\"token string\">\"us-west-2\"</span>\n<span class=\"token assign-left variable\">IMAGE_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"nike/nestjs-api\"</span>\n<span class=\"token assign-left variable\">ACCOUNT_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws sts get-caller-identity <span class=\"token operator\">|</span> jq -r <span class=\"token string\">\".Account\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">REPOSITORY_URI</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ACCOUNT_ID</span>.dkr.ecr.us-west-2.amazonaws.com\"</span>\n<span class=\"token assign-left variable\">ECR_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"ecr_example_repo\"</span>\n\n<span class=\"token comment\"># Check to see if version already exist</span>\n<span class=\"token assign-left variable\">NODE_V</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>jq <span class=\"token string\">\".version\"</span> package.json<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">element</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>aws ecr list-images --repository-name $IMAGE_NAME <span class=\"token operator\">|</span> jq .imageIds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>.imageTag<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$element</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"<span class=\"token variable\">$NODE_V</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> \n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[Error] Version <span class=\"token variable\"><span class=\"token variable\">`</span>$<span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span> Already exist in the remote registry, update your package.json version\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># Build your image</span>\n<span class=\"token function\">yarn</span> build\n<span class=\"token function\">docker</span> build -t <span class=\"token string\">\"<span class=\"token variable\">$IMAGE_NAME</span>:<span class=\"token variable\">$IMAGE_TAG</span>\"</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> build -t <span class=\"token string\">\"<span class=\"token variable\">$REPOSITORY_URI</span>/<span class=\"token variable\">$IMAGE_NAME</span>:latest\"</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> build -t <span class=\"token string\">\"<span class=\"token variable\">$REPOSITORY_URI</span>/<span class=\"token variable\">$IMAGE_NAME</span>:<span class=\"token variable\">$IMAGE_TAG</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># Create Infrastructure</span>\n<span class=\"token function\">pushd</span> pipelines/terraform\nterraform init\nterraform apply -auto-approve -var <span class=\"token assign-left variable\">ecr_registry_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$IMAGE_NAME</span>\"</span>\n<span class=\"token function\">popd</span>\n\n<span class=\"token comment\"># Authenticating to Docker</span>\naws ecr get-login-password --region <span class=\"token variable\">$AWS_REGION</span> <span class=\"token operator\">|</span> <span class=\"token function\">docker</span> login --username AWS --password-stdin <span class=\"token string\">\"<span class=\"token variable\">$ACCOUNT_ID</span>.dkr.ecr.<span class=\"token variable\">$AWS_REGION</span>.amazonaws.com\"</span>\n\n<span class=\"token comment\"># Push to the repository</span>\n<span class=\"token function\">docker</span> push <span class=\"token string\">\"<span class=\"token variable\">$ACCOUNT_ID</span>.dkr.ecr.us-west-2.amazonaws.com/<span class=\"token variable\">$IMAGE_NAME</span>:<span class=\"token variable\">$IMAGE_TAG</span>\"</span>\n<span class=\"token function\">docker</span> push <span class=\"token string\">\"<span class=\"token variable\">$ACCOUNT_ID</span>.dkr.ecr.us-west-2.amazonaws.com/<span class=\"token variable\">$IMAGE_NAME</span>:latest\"</span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>Elastic Container Service (ECS)</summary>\n<h1>ECS</h1>\n<ul>\n<li>ECS is a fully managed container orchestration service. AWS ECS is a fantastic service for running your containers.</li>\n<li>ECS Fargate, as this is a serverless compute service that allows you to run containers without provisioning servers.</li>\n</ul>\n<ol>\n<li>Create a cluster go <a href=\"https://us-west-2.console.aws.amazon.com/ecs/v2/clusters?region=us-west-2\">here</a> to see all your clusters</li>\n</ol>\n<ul>\n<li>Add this to your TF files and run\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_cluster\"</span></span> <span class=\"token string\">\"my_cluster\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span> <span class=\"token punctuation\">=</span> var.cluster_name\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>You should then see your new cluster in AWS</li>\n</ul>\n<ol start=\"2\">\n<li>Create a Task</li>\n</ol>\n<ul>\n<li>Notice how we specify the image by referencing the repository URL of our other terraform resource.</li>\n<li>Also notice how we provide the port mapping of 3000.</li>\n<li>We also create an IAM role so that tasks have the correct permissions to execute.</li>\n<li>If you click Task Definitions in AWS ECS, you should see your new task:</li>\n<li>Add the following code:\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token comment\"># Cluster</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_cluster\"</span></span> <span class=\"token string\">\"my_cluster\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span> <span class=\"token punctuation\">=</span> var.cluster_name\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"task_name\" </span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">type</span> <span class=\"token punctuation\">=</span> string\n  <span class=\"token property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"(optional) describe your variable\"</span>\n  <span class=\"token property\">default</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"my-first-task\"</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\"># Task definition</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_task_definition\"</span></span> <span class=\"token string\">\"my_first_task\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">family</span>                   <span class=\"token punctuation\">=</span> var.task_name\n  <span class=\"token property\">container_definitions</span>    <span class=\"token punctuation\">=</span> <span class=\"token heredoc string\">&#x3C;&#x3C;DEFINITION</span>\n<span class=\"token heredoc string\">  [</span>\n<span class=\"token heredoc string\">    {</span>\n<span class=\"token heredoc string\">      \"name\": \"${var.task_name}\",</span>\n<span class=\"token heredoc string\">      \"image\": \"${aws_ecr_repository.ecr_repo.repository_url}\",</span>\n<span class=\"token heredoc string\">      \"essential\": true,</span>\n<span class=\"token heredoc string\">      \"portMappings\": [</span>\n<span class=\"token heredoc string\">        {</span>\n<span class=\"token heredoc string\">          \"containerPort\": 3000,</span>\n<span class=\"token heredoc string\">          \"hostPort\": 3000</span>\n<span class=\"token heredoc string\">        }</span>\n<span class=\"token heredoc string\">      ],</span>\n<span class=\"token heredoc string\">      \"memory\": 512,</span>\n<span class=\"token heredoc string\">      \"cpu\": 256</span>\n<span class=\"token heredoc string\">    }</span>\n<span class=\"token heredoc string\">  ]</span>\n<span class=\"token heredoc string\">  DEFINITION</span>\n  <span class=\"token property\">requires_compatibilities</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"FARGATE\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Stating that we are using ECS Fargate</span>\n  <span class=\"token property\">network_mode</span>             <span class=\"token punctuation\">=</span> <span class=\"token string\">\"awsvpc\"</span>    <span class=\"token comment\"># Using awsvpc as our network mode as this is required for Fargate</span>\n  <span class=\"token property\">memory</span>                   <span class=\"token punctuation\">=</span> <span class=\"token number\">512</span>         <span class=\"token comment\"># Specifying the memory our container requires</span>\n  <span class=\"token property\">cpu</span>                      <span class=\"token punctuation\">=</span> <span class=\"token number\">256</span>         <span class=\"token comment\"># Specifying the CPU our container requires</span>\n  <span class=\"token property\">execution_role_arn</span>       <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_iam_role<span class=\"token punctuation\">.</span>ecsTaskExecutionRole<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">}</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_iam_role\"</span></span> <span class=\"token string\">\"ecsTaskExecutionRole\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>               <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ecsTaskExecutionRole\"</span>\n  <span class=\"token property\">assume_role_policy</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span><span class=\"token type variable\">aws_iam_policy_document</span><span class=\"token punctuation\">.</span>assume_role_policy<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">}</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">data <span class=\"token type variable\">\"aws_iam_policy_document\"</span></span> <span class=\"token string\">\"assume_role_policy\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">statement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">actions</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sts:AssumeRole\"</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">principals</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">type</span>        <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Service\"</span>\n      <span class=\"token property\">identifiers</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ecs-tasks.amazonaws.com\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_iam_role_policy_attachment\"</span></span> <span class=\"token string\">\"ecsTaskExecutionRole_policy\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">role</span>       <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_iam_role<span class=\"token punctuation\">.</span>ecsTaskExecutionRole<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token property\">policy_arn</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Create VPC</li>\n</ol>\n<ul>\n<li>As we are using Fargate, our tasks need to specify that the network mode is awsvpc.</li>\n<li>As a result, we need to extend our service to include a network configuration.</li>\n<li>You may have not known it yet, but our cluster was automatically deployed into your account’s default VPC.</li>\n<li>However, for a service, this needs to be explicitly stated, even if we wish to continue using the default VPC and subnets.</li>\n<li>First, we need to create reference resources to the default VPC and subnets so that they can be referenced by our other resources:\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_default_vpc\"</span></span> <span class=\"token string\">\"default\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">tags</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">Name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Default VPC\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Providing a reference to our default VPC</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_default_vpc\"</span></span> <span class=\"token string\">\"default_vpc\"</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Providing a reference to our default subnets</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_default_subnet\"</span></span> <span class=\"token string\">\"default_subnet_a\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">availability_zone</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"eu-west-2a\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_default_subnet\"</span></span> <span class=\"token string\">\"default_subnet_b\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">availability_zone</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"eu-west-2b\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_default_subnet\"</span></span> <span class=\"token string\">\"default_subnet_c\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">availability_zone</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"eu-west-2c\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Create a service</li>\n</ol>\n<ul>\n<li>time to create the service, notice that we are using the VPC define above\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token comment\"># Service</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_service\"</span></span> <span class=\"token string\">\"my_service\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>            <span class=\"token punctuation\">=</span> var.app_name                     <span class=\"token comment\"># Naming our first service</span>\n  <span class=\"token property\">cluster</span>         <span class=\"token punctuation\">=</span> aws_ecs_cluster.cluster.id       <span class=\"token comment\"># Referencing our created Cluster</span>\n  <span class=\"token property\">task_definition</span> <span class=\"token punctuation\">=</span> aws_ecs_task_definition.task.arn <span class=\"token comment\"># Referencing the task our service will spin up</span>\n  <span class=\"token property\">launch_type</span>     <span class=\"token punctuation\">=</span> <span class=\"token string\">\"FARGATE\"</span>\n  <span class=\"token property\">desired_count</span>   <span class=\"token punctuation\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\"># Setting the number of containers we want deployed to 2</span>\n\n\n  <span class=\"token keyword\">network_configuration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">subnets</span>          <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_subnet<span class=\"token punctuation\">.</span>default_subnet_a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span>, <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_subnet<span class=\"token punctuation\">.</span>default_subnet_b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span>, <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_subnet<span class=\"token punctuation\">.</span>default_subnet_c<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token property\">assign_public_ip</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># Providing our containers with public IPs</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li></li>\n</ul>\n<ol start=\"4\">\n<li>Final step is to create a Load Balancer</li>\n</ol>\n<ul>\n<li>Add this code to your TF files\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_alb\"</span></span> <span class=\"token string\">\"application_load_balancer\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>               <span class=\"token punctuation\">=</span> var.app_name <span class=\"token comment\"># Naming our load balancer</span>\n  <span class=\"token property\">load_balancer_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"application\"</span>\n  <span class=\"token property\">subnets</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\"># Referencing the default subnets</span>\n    <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_subnet<span class=\"token punctuation\">.</span>default_subnet_a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span>,\n    <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_subnet<span class=\"token punctuation\">.</span>default_subnet_b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span>,\n    <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_subnet<span class=\"token punctuation\">.</span>default_subnet_c<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># Referencing the security group</span>\n  <span class=\"token property\">security_groups</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_security_group<span class=\"token punctuation\">.</span>load_balancer_security_group<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Creating a security group for the load balancer:</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_security_group\"</span></span> <span class=\"token string\">\"load_balancer_security_group\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">ingress</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">from_port</span>   <span class=\"token punctuation\">=</span> <span class=\"token number\">80</span> <span class=\"token comment\"># Allowing traffic in from port 80</span>\n    <span class=\"token property\">to_port</span>     <span class=\"token punctuation\">=</span> <span class=\"token number\">80</span>\n    <span class=\"token property\">protocol</span>    <span class=\"token punctuation\">=</span> <span class=\"token string\">\"tcp\"</span>\n    <span class=\"token property\">cidr_blocks</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"0.0.0.0/0\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Allowing traffic in from all sources</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">egress</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">from_port</span>   <span class=\"token punctuation\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># Allowing any incoming port</span>\n    <span class=\"token property\">to_port</span>     <span class=\"token punctuation\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># Allowing any outgoing port</span>\n    <span class=\"token property\">protocol</span>    <span class=\"token punctuation\">=</span> <span class=\"token string\">\"-1\"</span> <span class=\"token comment\"># Allowing any outgoing protocol </span>\n    <span class=\"token property\">cidr_blocks</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"0.0.0.0/0\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Allowing traffic out to all IP addresses</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>To direct traffic we need to create a target group and listener. Each target group is used to route requests to one or more registered targets (in our case, containers).</li>\n<li>Add this code to your TF files\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token comment\"># Target Group and listener</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_lb_target_group\"</span></span> <span class=\"token string\">\"target_group\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>        <span class=\"token punctuation\">=</span> <span class=\"token string\">\"target-group\"</span>\n  <span class=\"token property\">port</span>        <span class=\"token punctuation\">=</span> <span class=\"token number\">80</span>\n  <span class=\"token property\">protocol</span>    <span class=\"token punctuation\">=</span> <span class=\"token string\">\"HTTP\"</span>\n  <span class=\"token property\">target_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ip\"</span>\n  <span class=\"token property\">vpc_id</span>      <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_default_vpc<span class=\"token punctuation\">.</span>default_vpc<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span> <span class=\"token comment\"># Referencing the default VPC</span>\n  <span class=\"token keyword\">health_check</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">matcher</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"200,301,302\"</span>\n    <span class=\"token property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_lb_listener\"</span></span> <span class=\"token string\">\"listener\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">load_balancer_arn</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_alb<span class=\"token punctuation\">.</span>application_load_balancer<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">}</span></span>\"</span> <span class=\"token comment\"># Referencing our load balancer</span>\n  <span class=\"token property\">port</span>              <span class=\"token punctuation\">=</span> <span class=\"token string\">\"80\"</span>\n  <span class=\"token property\">protocol</span>          <span class=\"token punctuation\">=</span> <span class=\"token string\">\"HTTP\"</span>\n  <span class=\"token keyword\">default_action</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">type</span>             <span class=\"token punctuation\">=</span> <span class=\"token string\">\"forward\"</span>\n    <span class=\"token property\">target_group_arn</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_lb_target_group<span class=\"token punctuation\">.</span>target_group<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">}</span></span>\"</span> <span class=\"token comment\"># Referencing our tagrte group</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Now if you go to EC2 then click on <code>Load Balancer</code></li>\n<li>If you view the Listeners tab of your load balancer, you should see a listener that forwards traffic to your target group:</li>\n<li>We now have to tell your <code>aws_ecs_service</code> about this load balancer\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_service\"</span></span> <span class=\"token string\">\"my_service\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>            <span class=\"token punctuation\">=</span> var.app_name                     <span class=\"token comment\"># Naming our first service</span>\n  <span class=\"token comment\"># ...</span>\n  \n  <span class=\"token keyword\">load_balancer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">target_group_arn</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_lb_target_group<span class=\"token punctuation\">.</span>target_group<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">}</span></span>\"</span> <span class=\"token comment\"># Referencing our target group</span>\n    <span class=\"token property\">container_name</span>   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_ecs_task_definition<span class=\"token punctuation\">.</span>my_first_task<span class=\"token punctuation\">.</span>family<span class=\"token punctuation\">}</span></span>\"</span>\n    <span class=\"token property\">container_port</span>   <span class=\"token punctuation\">=</span> <span class=\"token number\">3000</span> <span class=\"token comment\"># Specifying the container port</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>ECS service does not allow traffic in by default. We can change this by creating a security group for the ECS service that allows traffic only from the application load balancer security group:</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token comment\"># Service</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_service\"</span></span> <span class=\"token string\">\"service\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>            <span class=\"token punctuation\">=</span> var.app_name                     <span class=\"token comment\"># Naming our first service</span>\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">network_configuration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token property\">security_groups</span>  <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_security_group<span class=\"token punctuation\">.</span>service_security_group<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Setting the security group</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\"># Security Group</span>\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_security_group\"</span></span> <span class=\"token string\">\"service_security_group\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">ingress</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">from_port</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token property\">to_port</span>   <span class=\"token punctuation\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token property\">protocol</span>  <span class=\"token punctuation\">=</span> <span class=\"token string\">\"-1\"</span>\n    <span class=\"token comment\"># Only allowing traffic in from the load balancer security group</span>\n    <span class=\"token property\">security_groups</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>aws_security_group<span class=\"token punctuation\">.</span>load_balancer_security_group<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">egress</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">from_port</span>   <span class=\"token punctuation\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># Allowing any incoming port</span>\n    <span class=\"token property\">to_port</span>     <span class=\"token punctuation\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># Allowing any outgoing port</span>\n    <span class=\"token property\">protocol</span>    <span class=\"token punctuation\">=</span> <span class=\"token string\">\"-1\"</span> <span class=\"token comment\"># Allowing any outgoing protocol </span>\n    <span class=\"token property\">cidr_blocks</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"0.0.0.0/0\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Allowing traffic out to all IP addresses</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n</details>\n<details>\n<summary>DynamoDB</summary>\n<h1>DynamoDB</h1>\n<ul>\n<li>DynamoDB is a NoSQL database service</li>\n</ul>\n</details>\n<details>\n<summary>RDS</summary>\n<h1>RDS</h1>\n<ul>\n<li>Relational Database Service (RDS)</li>\n</ul>\n<h1>PostGIS</h1>\n<ul>\n<li><a href=\"https://www.martinpeters.ie/2020/02/01/cdk-rds-postgis-setup/\"></a></li>\n</ul>\n</details>\n<details>\n<summary>Aurora DB</summary>\n<h1>Aurora DB</h1>\n<ul>\n<li>MySQL and PostgreSQL-compatible relational database built for the cloud. Performance and availability of commercial-grade databases at 1/10th the cost.</li>\n<li>Amazon Aurora is a MySQL and PostgreSQL-compatible relational database built for the cloud, that combines the performance and availability of traditional enterprise databases with the simplicity and cost-effectiveness of open source databases.</li>\n<li>Amazon Aurora is up to five times faster than standard MySQL databases and three times faster than standard PostgreSQL databases.</li>\n<li>DB normally run on an EC and it a pain to scale</li>\n<li>Aurora scale automatically,</li>\n<li>Aurora make 6 copies of your data distributes around multiple locations</li>\n<li>Continuously backs it up to S3 so your data is safe</li>\n<li>Aurora can also replicate around multiple regions</li>\n<li>It's fully managed</li>\n<li>Aurora comes in 2 flavors\n<ul>\n<li>Aurora Basic</li>\n<li>Aurora Serverless (scales as much as you need and shuts down when you don't need it)</li>\n</ul>\n</li>\n<li>Aurora uses a data API to access the data, which is different to how you normally connect to a relational database (via connections)\n<ul>\n<li>Working with Relational Database you have to connect to the DB, do your operations, then closing the connections</li>\n<li>In the world of Serverless it become a little problematic cause you can have multiple lambda functions and they will all be handling the connections independenly which can lead to problems in your database like running out of open connections, your killing the memory, making it preform really bad</li>\n<li>You can use an AWS Proxy that sits between your Database and your lambda functions and will handle the connections</li>\n<li>You should really just use this if you have legacy DB</li>\n<li>If you are building a new application, just use the Aurora Serverless and save yourself the headache</li>\n</ul>\n</li>\n<li>DynamoDB used the model of accessing the DB via the API</li>\n<li>In the serverless world dealing with DB connections is a pain,</li>\n</ul>\n</details>\n<details>\n<summary>AWS CDK (AWS Cloud Development Kit)</summary>\n<h1>AWS CDK (AWS Cloud Development Kit)</h1>\n<ul>\n<li>The AWS CDK (Amazon Web Services Cloud Development Kit) is a <a href=\"https://github.com/aws/aws-cdk\">new open source framework</a> to define cloud infrastructure in code (Infrastructure as Code) and provisioning it through AWS CloudFormation.</li>\n<li>CDK provides many high level components to allow rapid code development requiring much less input compared to the typical CloudFormation templates.</li>\n<li>CDK is available in TypeScript, Python, Java and C#.\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Install globally </span>\n$ <span class=\"token function\">npm</span> i -g aws-cdk\n\n$ <span class=\"token function\">mkdir</span> my-app <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token builtin class-name\">cd</span> my-app\n$ cdk init app --language<span class=\"token operator\">=</span>typescript\n\n$ <span class=\"token function\">npm</span> i @aws-cdk/aws-apigatewayv2 @aws-cdk/aws-apigatewayv2-integrations @aws-cdk/aws-ec2 @aws-cdk/aws-lambda @aws-cdk/aws-rds @aws-cdk/core source-map-support\n</code></pre></div>\n</li>\n</ul>\n</details>\n<details>\n<summary>AWS SAM (AWS Serverless Application Model)</summary>\n<h1>AWS SAM (AWS Serverless Application Model)</h1>\n<ul>\n<li>SAM is an open-source framework for building serverless applications.</li>\n<li>You define the services you want in YAML and during the deployment SAM will convert it to CloudFormation syntax</li>\n<li>SAM can be installed with <code>Homebrew</code></li>\n<li>SAM allows you to run your application locally so you can test it out and debug</li>\n<li>SAM is Infrastructure as Code</li>\n</ul>\n<h2>Installing SAM on MacOS</h2>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-mac.html\">How to install SAM</a>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ brew tap aws/tap\n$ brew <span class=\"token function\">install</span> aws-sam-cli\n$ sam --version\n\n$ brew upgrade aws-sam-cli\n</code></pre></div>\n</li>\n</ul>\n<h2>Get setup</h2>\n<ul>\n<li>Start by scaffolding your application\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Step 1 - Download a sample application</span>\n$ sam init\n<span class=\"token comment\"># 1 - AWS Quick Start Templates</span>\n<span class=\"token comment\"># 1 - Zip (artifact is a zip uploaded to S3)</span>\n<span class=\"token comment\"># 1 - nodejs14.x</span>\n<span class=\"token comment\"># AWS quick start application templates:</span>\n<span class=\"token comment\">#    1 - Hello World Example</span>\n<span class=\"token comment\">#    2 - Step Functions Sample App (Stock Trader)</span>\n<span class=\"token comment\">#    3 - Quick Start: From Scratch</span>\n<span class=\"token comment\">#    4 - Quick Start: Scheduled Events</span>\n<span class=\"token comment\">#    5 - Quick Start: S3</span>\n<span class=\"token comment\">#    6 - Quick Start: SNS</span>\n<span class=\"token comment\">#    7 - Quick Start: SQS</span>\n<span class=\"token comment\">#    8 - Quick Start: Web Backend</span>\n\n<span class=\"token comment\"># Step 2 run your code locally</span>\n$ sam <span class=\"token builtin class-name\">local</span> start-api\n\n<span class=\"token comment\"># Step 3 - Build your application</span>\n$ <span class=\"token builtin class-name\">cd</span> sam-app\n$ sam build\n\n<span class=\"token comment\"># Step 4 - Deploy your application</span>\n$ sam deploy --guided\n<span class=\"token comment\"># Once everything is deployed it will print out the REST Endpoint `https://&#x3C;RANDOM_STRING>.execute-api.us-west-2.amazonaws.com/Prod/`</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Check your stuff out in AWS Console</h2>\n<ul>\n<li>You can view your SAM application in AWS Console by going to <code>Lambda</code> > <code>Applications</code>\n<img src=\"/assets/blog/aws/aws-console_serverless-application.png\" alt=\"aws-console_serverless-application\"></li>\n<li>You can view your stack my clicking the <code>CloudFormation</code></li>\n</ul>\n<h2>Check your stuff within VSCode with the <code>Serverless Console</code> extension</h2>\n<ul>\n<li>\n<p>You can use a vscode extension <a href=\"https://marketplace.visualstudio.com/items?itemName=devAdvice.serverlessconsole\">Serverless Console</a> to view all the logs</p>\n<ul>\n<li>In vscode click the lighting bolt in the quick look panel</li>\n<li>Create a connection</li>\n</ul>\n<p><img src=\"/assets/blog/aws/serverless-console_connect.png\" alt=\"serverless-console_connect\"></p>\n<p><img src=\"/assets/blog/aws/serverless-console_panel.png\" alt=\"serverless-console_panel\"></p>\n</li>\n<li>\n<p>Invoke your Lambda function directly</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ sam <span class=\"token builtin class-name\">local</span> invoke <span class=\"token string\">\"HelloWorldFunction\"</span> -e events/event.json\n</code></pre></div>\n</li>\n</ul>\n<h2>Cleanup</h2>\n<ul>\n<li>\n<p>To delete the sample application that you created, use the AWS CLI. Assuming you used your project name for the stack name, you can run the following:</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">aws cloudformation delete-stack --stack-name <span class=\"token operator\">&#x3C;</span>STACK_NAME<span class=\"token operator\">></span>\n</code></pre></div>\n</li>\n</ul>\n</details>\n","ogImage":{"url":"/assets/covers/aws.jpg"},"coverImage":"/assets/covers/aws.jpg"}},"__N_SSG":true}