{"pageProps":{"post":{"title":"bash","slug":"bash","content":"<h1>Overview of bash</h1>\n<h2>Bash tips</h2>\n<ul>\n<li>\n<p>Create a new directory or folder</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> <span class=\"token operator\">&#x3C;</span>directory_name<span class=\"token operator\">></span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$_</span>\n\n<span class=\"token comment\"># For oh-my-zsh users:</span>\n$ take <span class=\"token operator\">&#x3C;</span>directory_name<span class=\"token operator\">></span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Kill process running on a port number</h1>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Find:</span>\n$ <span class=\"token function\">lsof</span> -i :3000\n\n<span class=\"token comment\"># Kill:</span>\n$ <span class=\"token function\">kill</span> -9 <span class=\"token operator\">&#x3C;</span>PID<span class=\"token operator\">></span>\n</code></pre></div>\n<h1>ZX to create JS script</h1>\n<ul>\n<li>The <code>ZX</code> package provides useful wrappers around <code>child_process</code>, escapes arguments and gives sensible defaults.</li>\n<li>What this nodejs package actually do is it allows you to right scripts in JS and use bash sprinkled into it</li>\n</ul>\n<h2>Get started</h2>\n<ol start=\"0\">\n<li>\n<p>Install\n$ npm i -g zx</p>\n</li>\n<li>\n<p>Add the following shebang to the beginning of your zx scripts:</p>\n</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env zx\n</code></pre></div>\n<ol start=\"2\">\n<li>How to run the script</li>\n</ol>\n<ul>\n<li>Run it like a regular bash script\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">chmod</span> +x ./script.mjs\n$ ./script.mjs\n</code></pre></div>\n</li>\n<li>Or\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ zx ./script.mjs\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>How to write commands</li>\n</ol>\n<ul>\n<li>All functions ($, cd, fetch, question, sleep, etc) are available straight away without any imports.</li>\n<li>Also includes (chalk, fs, os) without any imports.\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">$<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">command</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Working with ZX</h2>\n<h3>Run bash command</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pwd</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword control-flow\">await</span> $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cat package.json | grep name</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n<h3>You can use chalk</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>chalk<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">blue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'homedir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">homedir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>JS promises</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sleep 1; echo 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sleep 2; echo 2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sleep 3; echo 3</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>fetch from a URL</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> spaceXUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.spacexdata.com/v4/launches/latest'</span>\n<span class=\"token keyword\">let</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>spaceXUrl<span class=\"token punctuation\">)</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span><span class=\"token property-access\">ok</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> resp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Ask questions</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> shoes <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whats your favorite Nike shoe? '</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Choose env variable: '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  choices<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>shoes<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h1>node init script</h1>\n<ul>\n<li>it get a little tedious to scafold out a quick node application</li>\n<li>Create a file in <code>~/.zsh/nodejs.zsh</code>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># NVM</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.nvm\"</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"token comment\"># This loads nvm</span>\n\n<span class=\"token comment\"># Node Environment</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NODE_ENV</span><span class=\"token operator\">=</span>development\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">npmlsg</span><span class=\"token operator\">=</span><span class=\"token string\">'npm list -g --depth=0'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">npmlsl</span><span class=\"token operator\">=</span><span class=\"token string\">'npm list -g --depth=0 --link=true'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">npmis</span><span class=\"token operator\">=</span><span class=\"token string\">\"npm i &#x26;&#x26; npm start\"</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">cra</span><span class=\"token operator\">=</span><span class=\"token string\">\"npx create-react-app \"</span>\n<span class=\"token comment\"># Open Brave browser with term</span>\n\n<span class=\"token comment\"># Scaffold a nodejs esm module</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">initnodejs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\"># Git</span>\n  <span class=\"token function\">git</span> init\n  <span class=\"token function\">git</span> branch -m main default\n\n  <span class=\"token comment\"># Node configuration &#x26; packages</span>\n  <span class=\"token function\">npm</span> init -y\n  <span class=\"token function\">npm</span> i -D @babel/node@7 @babel/preset-env@7 @babel/cli@7 @babel/core@7\n  <span class=\"token function\">npm</span> i -D prettier eslint eslint-config-prettier eslint-plugin-prettier\n\n  <span class=\"token comment\"># Create RC Files</span>\n  makeRCFiles\n\n  makeNodeFile\n\n  <span class=\"token comment\"># Update the `packages.json` file</span>\n  <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"npx nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.start=<span class=\"token variable\">$newVal</span>'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n  <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.build=<span class=\"token variable\">$newVal</span>'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n  <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"node dist/index.js\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.serve=<span class=\"token variable\">$newVal</span>'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">makeRCFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Create `.gitignore` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .gitignore</span>\nnode_modules\ndist\n.env\nEOT</span>\n\n\n  <span class=\"token comment\"># Create `.prettierrc` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .prettierrc</span>\n{\n  \"semi\": false,\n  \"trailingComma\": \"all\",\n  \"singleQuote\": true,\n  \"printWidth\": 70\n}\nEOT</span>\n\n  <span class=\"token comment\"># Create `.babelrc` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .babelrc</span>\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"esmodules\": true\n        }\n      }\n    ]\n  ]\n}\nEOT</span>\n\n  <span class=\"token comment\"># Create `.eslintrc` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .eslintrc</span>\n{\n  \"env\": {\n    \"commonjs\": true,\n    \"es6\": true,\n    \"node\": true\n  },\n  \"extends\": [ \"prettier\", \"plugin:node/recommended\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2018\n  },\n  \"plugins\": [\"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": \"error\",\n    \"no-unused-vars\": \"warn\",\n    \"no-console\": \"off\",\n    \"func-names\": \"off\",\n    \"no-process-exit\": \"off\",\n    \"class-methods-use-this\": \"off\"\n  }\n}\nEOT</span>\n\n  <span class=\"token comment\"># Create `.vscode/settings.json` files</span>\n  <span class=\"token function\">mkdir</span> .vscode\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .vscode/settings.json</span>\n{\n  // Set prettier to be the default formatter\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\n  // Don't format any files by default\n  \"editor.formatOnSave\": false,\n\n  // Define the file types to do the autoformatting\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  }\n\n}\nEOT</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">makeNodeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mkdir</span> src\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> src/index.js</span>\nimport crypto from 'crypto'\n\nconst password = '123456789'\nconst key = crypto.scryptSync(password, 'GfG', 24)\nconsole.log(key)\nEOT</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">\n\n\n</code></pre></div>\n","ogImage":{"url":"/assets/blog/hello-world/cover.jpg"},"coverImage":"/assets/blog/hello-world/cover.jpg"}},"__N_SSG":true}