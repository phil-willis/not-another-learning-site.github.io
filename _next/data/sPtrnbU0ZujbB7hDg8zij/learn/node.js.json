{"pageProps":{"post":{"title":"node.js","slug":"node.js","content":"<h1>What is Nodejs</h1>\n<ul>\n<li>\n<p>Node.js is an open-source and cross-platform JavaScript runtime environment.</p>\n</li>\n<li>\n<p>Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.</p>\n</li>\n<li>\n<p>Both the browser and Node.js use JavaScript as their programming language.</p>\n</li>\n<li>\n<p>Node.js you don't have the <code>document</code>, <code>window</code> and all the other objects that are provided by the browser.</p>\n</li>\n<li>\n<p>The Browser we don't have all the nice APIs that allow for filesystem access functionality</p>\n</li>\n<li>\n<p>An additional feature that Nodejs provides is control over teh environment</p>\n</li>\n<li>\n<p>common npm commands</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init\n$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&#x3C;</span>PACKAGE_NAME<span class=\"token operator\">></span> <span class=\"token operator\">|</span>  <span class=\"token function\">npm</span> i <span class=\"token operator\">&#x3C;</span>PACKAGE_NAME<span class=\"token operator\">></span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g <span class=\"token operator\">&#x3C;</span>SOME_GLOBAL_PACKAGE<span class=\"token operator\">></span>\n$ <span class=\"token function\">npm</span> uninstall <span class=\"token operator\">&#x3C;</span>PACKAGE_NAME<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> un <span class=\"token operator\">&#x3C;</span>PACKAGE_NAME<span class=\"token operator\">></span>\n$ <span class=\"token function\">npm</span> update <span class=\"token operator\">&#x3C;</span>PACKAGE_NAME<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> up <span class=\"token operator\">&#x3C;</span>PACKAGE_NAME<span class=\"token operator\">></span>\n$ <span class=\"token function\">npm</span> update\n$ <span class=\"token function\">npm</span> audit\n\n<span class=\"token comment\"># Run a npm script</span>\n$ <span class=\"token function\">npm</span> run <span class=\"token operator\">&#x3C;</span>NPM_SCRIPT_NAME<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># list globally installed packages</span>\n$ <span class=\"token function\">npm</span> list -g --depth<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n<span class=\"token comment\"># Update npm</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g npm@latest\n\n<span class=\"token comment\"># list installed packages and versions</span>\n$ <span class=\"token function\">npm</span> list <span class=\"token operator\">|</span> <span class=\"token function\">npm</span> <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># Install clean slate of the packages</span>\n$ <span class=\"token function\">npm</span> ci\n\n<span class=\"token comment\"># Symlink a package folder, to used it locally without publishing it </span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">link</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>The <code>package.json</code> file</h1>\n<ul>\n<li>The package.json file is a manifest for your project.</li>\n<li>It also defines alot of other things like, list all the dependencies you application needs &#x26; versions</li>\n<li>The easiest way to create one is <code>$ npm init -y</code></li>\n<li>The file structure might have these properties inside\n<ul>\n<li><code>version</code> indicates the current version</li>\n<li><code>name</code> sets the application/package name</li>\n<li><code>description</code> is a brief description of the app/package</li>\n<li><code>main</code> set the entry point for the application</li>\n<li><code>private</code> if set to true prevents the app/package to be accidentally published on npm</li>\n<li><code>scripts</code> defines a set of node scripts you can run</li>\n<li><code>dependencies</code> sets a list of npm packages installed as dependencies</li>\n<li><code>devDependencies</code> sets a list of npm packages installed as development dependencies</li>\n<li><code>engines</code> sets which versions of Node.js this package/app works on</li>\n<li><code>browserslist</code> is used to tell which browsers (and their versions) you want to support</li>\n</ul>\n</li>\n<li>In package.json you can set which versions you want to upgrade to (patch or minor), using the semver notation, for example:</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">exact package version               1.13.0 =&#x26;gt; 1.13.0\nupdate patch and minor releases     ~1.13.0 =&#x26;gt; 1.13.*\nexact version                       ^1.13.0 =&#x26;gt; 1.*.*</code></pre></div>\n<ul>\n<li>Don't commit your <code>node_modules</code> files because the <code>package.json</code> is used to fetch and manage the packaged used for the nodejs project</li>\n</ul>\n<h1>The <code>package-lock.json</code> file</h1>\n<ul>\n<li>In version 5, npm introduced the package-lock.json file.</li>\n<li>The goal of package-lock.json file is to keep track of the exact version of every package that is installed so that a product is 100% reproducible in the same way even if packages are updated by their maintainers.</li>\n<li>The package-lock.json sets your currently installed version of each package in stone, and npm will use those exact versions when running npm install.</li>\n<li>The <code>package-lock.json</code> file needs to be committed to your Git repository, so it can be fetched by other people, if the project is public or you have collaborators, or if you use Git as a source for deployments.</li>\n</ul>\n<h1>Creating a npm package</h1>\n<p>https://dev.to/joshaguilar/fully-automating-npm-package-releases-3k7ez</p>\n<ul>\n<li>sematic versioning\n<BREAKING>.<FEATURE>.<FIX>\n<MAJOR>.<MINOR>.<PATCH></li>\n</ul>\n<h2>For Every release</h2>\n<ol>\n<li>Run tests (if there are any)</li>\n<li>Update version in package.json according to Semver</li>\n<li>Create a git tag according to Semver\nMAJOR.MINOR.PATCH\n<code>$ git tag -a v#.#.# -m #.#.#</code></li>\n<li>Push the package to Github</li>\n<li>Push the package to npm</li>\n<li>Create release notes for every update</li>\n</ol>\n<h1>import/export files</h1>\n<ul>\n<li>\n<p>If you have a folder structure of and your <code>MyComponent</code> has a <code>default export</code>\n├── MyComponent.stories.jsx\n├── MyComponent.jsx\n├── MyComponent.module.css\n└── index.js</p>\n</li>\n<li>\n<p>Your <code>index.js</code> content</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// import MyComponent from './MyComponent'</span>\n<span class=\"token comment\">// export default MyComponent</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./MyComponent'</span>\n</code></pre></div>\n</li>\n<li>\n<p>If you have a folder structure of and your <code>MyComponent</code> has a <code>named export</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// export { default as ComponentOne } from './MyComponent'</span>\n<span class=\"token comment\">// export { default as ComponentTwo } from './MyComponent'</span>\n<span class=\"token comment\">// export { default as ComponentThree } from './MyComponent'</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Using Docker to local development</h1>\n<ul>\n<li>\n<p>Initialize a nodejs</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i express\n$ <span class=\"token function\">npm</span> i -D nodemon\n$ <span class=\"token function\">mkdir</span> src\n</code></pre></div>\n</li>\n<li>\n<p>Update the <code>package.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docker\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Example of working with Docker and Expressjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node ./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon ./src\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.7\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"engines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\">= 14.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"npm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\">= 7.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>Create the <code>src/index.js</code> file</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Constants</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HOST</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOST</span> <span class=\"token operator\">||</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// App</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The magic is running on http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">HOST</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>Create a <code>.gitignore</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">node_modules</code></pre></div>\n</li>\n<li>\n<p>Create a <code>Dockerfile</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>14\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n<span class=\"token keyword\">COPY</span> package*.json ./\n<span class=\"token keyword\">RUN</span> npm install\n\n<span class=\"token keyword\">COPY</span> . .\n\n<span class=\"token keyword\">EXPOSE</span> 8080\n\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"npm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span> <span class=\"token punctuation\">]</span>\n</code></pre></div>\n</li>\n<li>\n<p>Create a <code>.dockerignore</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">node_modules\nnpm-debug.log</code></pre></div>\n</li>\n<li>\n<p>Create a docker image for your application to develop with</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker build <span class=\"token builtin class-name\">.</span> -t <span class=\"token operator\">&#x3C;</span>DOCKER_USERNAME<span class=\"token operator\">></span>/node-web-app\n$ docker run -it -p <span class=\"token number\">8080</span>:8080 -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>:/usr/src/app --name my_awesome_app -d <span class=\"token operator\">&#x3C;</span>DOCKER_USERNAME<span class=\"token operator\">></span>/node-web-app  <span class=\"token function\">sh</span> -c <span class=\"token string\">'npm run dev'</span> \n</code></pre></div>\n</li>\n<li>\n<p>The above allows you to develop inside the docker container via a volume</p>\n</li>\n<li>\n<p>When you are ready to publish you can create an image with a version</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker build <span class=\"token builtin class-name\">.</span> -t <span class=\"token operator\">&#x3C;</span>DOCKER_USERNAME<span class=\"token operator\">></span>/node-web-app:v0.1\n$ docker run -p <span class=\"token number\">8080</span>:8080 --name my_awesome_app_prod -d <span class=\"token operator\">&#x3C;</span>DOCKER_USERNAME<span class=\"token operator\">></span>/node-web-app:v0.1\n</code></pre></div>\n</li>\n<li>\n<p>Add TypeScript</p>\n<ul>\n<li>Install typescript\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -D typescript ts-node @types/node @types/express\n</code></pre></div>\n</li>\n<li>Update your <code>package.json</code> file</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node ./dist/src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon ./src/index.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Create a <code>tsconfig.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Rename <code>src/index.js</code> to <code>src/index.ts</code></li>\n<li>Now you can use <code>import</code> instead of commonjs <code>require(&#x3C;package_name>)</code>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> express<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Request<span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">,</span> NextFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Constants</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Types</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RootMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// App</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span>Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> message<span class=\"token operator\">:</span> RootMessage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>message<span class=\"token operator\">:</span><span class=\"token string\">'Hello World!!'</span><span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The magic is running on PORT:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Installation</h1>\n<ul>\n<li>There are a few ways to install Nodejs on your machine</li>\n<li>There are 2 main versions to consider <code>LTS</code> and <code>Current</code></li>\n<li><code>LTS</code> is for Long Term Support which is the stable version as for the <code>Current</code> is the more cutting edge</li>\n<li>Nodejs even versions are stable and odd versions for the lastest versions</li>\n<li>More about release dates and versions <a href=\"https://nodejs.org/en/about/releases/\">go here</a></li>\n</ul>\n<ol>\n<li>Install from the <a href=\"https://nodejs.org/en/\">nodejs</a> homepage</li>\n<li>HomeBrew on your mac</li>\n<li><a href=\"https://github.com/nvm-sh/nvm\">NVM</a> (My prefered way cause you can switch node versions easily)</li>\n</ol>\n<h2>Installing nodejs via Homepage</h2>\n<ul>\n<li>Install the latest binaries <a href=\"https://nodejs.org/en/download/\">here</a></li>\n</ul>\n<h2>Installing nodejs via HomeBrew</h2>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ brew update\n$ brew upgrade node\n</code></pre></div>\n<h2>Install nodejs with nvm</h2>\n<ul>\n<li>\n<p>Install via homebrew</p>\n<ul>\n<li><a href=\"http://dev.topheman.com/install-nvm-with-homebrew-to-use-multiple-versions-of-node-and-iojs-easily/\">tut</a></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ brew update\n$ brew <span class=\"token function\">install</span> nvm\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># NVM installed via homebrew</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -s <span class=\"token environment constant\">$HOME</span>/.nvm/nvm.sh <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token builtin class-name\">.</span> <span class=\"token environment constant\">$HOME</span>/.nvm/nvm.sh\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/.nvm\"</span>\n<span class=\"token builtin class-name\">source</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix nvm<span class=\"token variable\">)</span></span>/nvm.sh\n</code></pre></div>\n</li>\n<li>\n<p>Install via the <a href=\"https://github.com/nvm-sh/nvm\">ruby way</a></p>\n<ul>\n<li>Add this to your bash/zshrc:\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># NVM</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.nvm\"</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"token comment\"># This loads nvm</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/bash_completion\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/bash_completion\"</span>  <span class=\"token comment\"># This loads nvm bash_completion</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/local/opt/grep/libexec/gnubin:<span class=\"token environment constant\">$PATH</span>\"</span>\n</code></pre></div>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">undefined</code></pre></div>\n</li>\n<li>\n<p><em>note :</em> every time you switch node versions you'll have to install all your globals again as well as you will have to delete your projects <code>node_modules</code> because these dependencies are specfic to the exact node version &#x26; OS installed</p>\n</li>\n<li>\n<p>If your npm global packages point to a different nodejs version run this</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> list -g --depth<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n$ <span class=\"token function\">npm</span> config <span class=\"token function\">rm</span> prefix\n</code></pre></div>\n</li>\n<li>\n<p>NVM commands</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Check nodejs version</span>\n$ node -v <span class=\"token operator\">||</span> node --version\n\n<span class=\"token comment\"># List installed versions of node (via nvm)</span>\n$ nvm <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># Install specific version of node</span>\n$ nvm <span class=\"token function\">install</span> <span class=\"token number\">12.20</span>.1\n\n<span class=\"token comment\"># Set default version of node</span>\n$ nvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token number\">12.20</span>.1\n\n<span class=\"token comment\"># Switch version of node</span>\n$ nvm use <span class=\"token number\">14.15</span>.4\n\n<span class=\"token comment\"># List latest available versions</span>\n$ nvm ls-remote <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -i <span class=\"token string\">'latest'</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Node tools</h1>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Find out-of-day packages</span>\n$ npx npm-upgrade\n\n$ npx depcheck\n\n<span class=\"token comment\"># Find and delete `node_modules` on your machine</span>\n$ npx npkill\n</code></pre></div>\n<h1>Killing your local server that is going rogue</h1>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Find:</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">lsof</span> -i :3000\n\n<span class=\"token comment\"># Kill:</span>\n$ <span class=\"token function\">kill</span> -9 <span class=\"token operator\">&#x3C;</span>PID<span class=\"token operator\">></span>\n</code></pre></div>\n<h1>Git hooks</h1>\n<ul>\n<li>\n<p>Automation is always good, especially when it reduces congnitive load and optimization</p>\n</li>\n<li>\n<p>We can automate things before we create commits or push changes to a repo</p>\n</li>\n<li>\n<p>The <code>.git</code> ditectory allows you to do native hooks if you want to or you can use something like husky to do all the heavy lifting for you and you can stay in JS land :)</p>\n</li>\n<li>\n<p>Check out the <a href=\"https://typicode.github.io/husky/#/\">Husky docs here</a></p>\n</li>\n<li>\n<p>Husky works with all <a href=\"https://git-scm.com/docs/githooks\">githooks</a></p>\n</li>\n<li>\n<p>Intall husky with:</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx husky-init <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> \n</code></pre></div>\n</li>\n<li>\n<p>This will automatically wireup all the git hooks and add a script <code>.husky/pre-commit</code> where you can add whatever command run before a commit</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span>\n\n<span class=\"token function\">npm</span> run lint\n</code></pre></div>\n</li>\n<li>\n<p>It will setup husky, modify <code>package.json</code> and create a sample <code>pre-commit</code> hook that you can edit. - By default, it will run npm test when you commit.</p>\n</li>\n<li>\n<p>To add another hook use husky add.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx husky <span class=\"token function\">add</span> .husky/pre-push <span class=\"token string\">'npm run lint &#x26;&#x26; npm run test:ci'</span>\n</code></pre></div>\n</li>\n<li>\n<p>This will create <code>.husky/pre-push</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span>\n\n<span class=\"token function\">npm</span> run lint <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">npm</span> run test:ci\n</code></pre></div>\n</li>\n</ul>\n<h1>Expressjs app</h1>\n<ul>\n<li>Express is a very light weight and popular nodejs server frameworks</li>\n<li>Express provides a minimal interface to build our REST applications</li>\n<li><a href=\"https://expressjs.com/en/4x/api.html\">Expressjs docs</a></li>\n<li>Installation\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save express\n$ <span class=\"token function\">npm</span> i -D nodemon\n</code></pre></div>\n</li>\n<li>The minimum amount of code you need to get a <code>hello-world</code> server\n<ul>\n<li>Create a new file called index.js and type the following in it.\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>Run the application in watch mode</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx nodemon index.js\n</code></pre></div>\n</li>\n<li>Great so we got that out of the way, now let's talk about folder structure\n<ul>\n<li>Unlike most programming languages, Nodejs + Express seems to have so many different conventions with no \"right way\"</li>\n<li>You should aim at separating our logic by layers, a project structure will naturally emerge.</li>\n<li>Whether you are doing tranditional MVC, MVC-ish or components, as long as you are sticking to a structure you should be all good</li>\n</ul>\n</li>\n<li>Let's talk about the layers in an Express application\n<ul>\n<li><code>HTTP layer</code> --> <code>service layer</code> -->  <code>database access layer</code> --> <code>database</code></li>\n</ul>\n</li>\n<li>There are 2 main categories when it comes to the REST API logic:\n<ol>\n<li>HTTP Logic (Routes &#x26; Controllers)</li>\n<li>Business logic (Services &#x26; DataAccess)</li>\n</ol>\n</li>\n</ul>\n<p>Routes\nController\nServices\nData Access</p>\n<ul>\n<li>We want to focus on separation of concerns when designing our applications &#x26; we want our applications to modular so that if we need to update a database or framework the rest of the application is still functional and not indepedent.</li>\n<li>You shouldn't pass things downstream that might contain an interdemendancy</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Routes -&#x26;gt; Routers -&#x26;gt; Controllers -&#x26;gt; Service -&#x26;gt; DataAccess</code></pre></div>\n<h2>Routes (http context)</h2>\n<ul>\n<li>Create a <code>./src/routes.js</code> file.</li>\n<li>The routes should just map all the routes with the responding routers</li>\n<li>Generally one file should do the trick\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> markers <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./markers/controller.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./user/controller.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/markers\"</span><span class=\"token punctuation\">,</span> markers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>As your application grows it's really easy to add more routes</li>\n</ul>\n<h2>Routers (http context)</h2>\n<ul>\n<li>Since we're gonna be using the <code>component</code> based approach we're gonna make folders for each of the categories</li>\n<li>No logic should go in your <code>routes</code> or <code>routers</code>, They should only chain together all the <code>controllers</code> functions</li>\n<li>It's best to have one controller per route</li>\n<li>for example the <code>./src/user/controller.js</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Router</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET route on users.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>y\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">GET </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> route on user.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST route on user.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PUT route on user.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE route on user.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Controller (http context)</h2>\n<ul>\n<li>The <code>Controllers</code> are the \"orchestrators\", they call the <code>services</code> and they don't really contain any logic other than handling the request and calling the <code>service</code></li>\n<li><code>Services</code> do all the work and can be see as containing the \"business logic\"</li>\n<li><code>Controllers</code> take in the HTTP request forwarded from the route and either returns a response or keeps the chain of calls going</li>\n<li><code>Controllers</code> also handles the <code>HTTP status code</code> and the <code>response</code></li>\n<li>You should avoid passing http context to the next layer (service layer), because you don't want the rest of the application to depend on the request object. We want to make it easy to test or swap out frameworks and having instances of <code>req</code> object downstream makes it more difficult to test or update frameworks</li>\n<li>This is the end of the <code>http context</code></li>\n</ul>\n<h2>Services (Business logic context)</h2>\n<ul>\n<li>\n<p><code>Services</code> should contain the majority of the business logic</p>\n</li>\n<li>\n<p>The route methods follow the HTTP verbs (GET, SET, PUT, DELETE, etc)</p>\n</li>\n<li>\n<p>You write your endpoints with</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">METHOD</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">PATH_STARTING_WITH_SLASH</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x3C;</span><span class=\"token constant\">HANDLER_CODE</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can provide a <code>catch all</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP method doesn't have any effect on this route!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>NOTE</strong> the order of the route matter, express will take the first matching <code>METHOD/PATH</code> it finds, so you want to add the <code>app.all()</code> to the bottom of the routes</p>\n</li>\n<li>\n<p>Starting <code>./src/index.js</code> file</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Catch all route</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP method doesn't have any effect on this route!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start server</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The magic happens at localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>Adding a Router</p>\n<ul>\n<li>Defining routes above can get tedious, so <code>Express</code> allows for a Router</li>\n<li>Create a  <code>./users/routes.js</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Router</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET route on users.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">GET </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> route on users.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST route on users.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PUT route on users.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE route on users.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//export this router to use in our index.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">- You can pass in route parameters with the `:&#x26;lt;SOME_PARAMS_NAME&#x26;gt;` and you can access that route params with the `req.params.&#x26;lt;SOME_PARAMS_NAME&#x26;gt;`\n- You can add as many route params as you like\n  ```js\n  app.get(&#x26;#39;/users/:name/:id&#x26;#39;, function(req, res) {\n    res.send(&#x26;#39;id: &#x26;#39; + req.params.id + &#x26;#39; and name: &#x26;#39; + req.params.name);\n  });</code></pre></div>\n<ul>\n<li>Pattern Matched Routes\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/things/:id([0-9]{5})'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id: '</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>Now your <code>./src/index.js</code> file might look a little more like this:\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./users/routes.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Define the `/api/*` routes</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">express<span class=\"token punctuation\">.</span>Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/\"</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Routes</span>\napi<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Catch all route</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP method doesn't have any effect on this route!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start server</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The magic happens at localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>You can now hit your REST API with\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ nodemon src/index.js\n\n<span class=\"token comment\"># In a new terminal</span>\n$ <span class=\"token function\">curl</span> -X GET <span class=\"token string\">\"http://localhost:3003/api/users\"</span>\n$ <span class=\"token function\">curl</span> -X POST <span class=\"token string\">\"http://localhost:3003/api/users\"</span>\n$ <span class=\"token function\">curl</span> -X PUT <span class=\"token string\">\"http://localhost:3003/api/users\"</span>\n$ <span class=\"token function\">curl</span> -X DELETE <span class=\"token string\">\"http://localhost:3003/api/users\"</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Middleware</p>\n<ul>\n<li>Middleware allows you to preform something before the route <code>req</code> for a specific route or on all routes</li>\n<li>They look very similar to a <code>req/res</code> except they have <code>req/res/next</code> the <code>next</code> is very important because it tells Express that you are done with the middleware functionality and then go on to the next thing in the list (can be another middleware or a route)</li>\n<li>It's important to note that middleware gets added to the routes</li>\n<li>Create a <code>./src/middleware/time-loger.js</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//Simple request time logger</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">timeLogger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A new request received at \"</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This `next()` allows  the applications to go on to the the next middleware/route</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> timeLogger<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>Now in the <code>./src/index.js</code> could look more like\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> timeLogger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middleware/time-logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./users/routes.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Define the `/api/*` routes</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">express<span class=\"token punctuation\">.</span>Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/\"</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// =========APPLY TO ALL `/api/*` routes =======</span>\napi<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>timeLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// =========APPLY TO ALL `/api/*` routes =======</span>\n\n\n<span class=\"token comment\">// =========APPLY ONLY TO `/api/users` route =======</span>\n<span class=\"token comment\">// NOTICE WE ADDED `timeLoger` before the `users`</span>\napi<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> timeLogger<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span>\n<span class=\"token comment\">// =========APPLY ONLY TO `/api/users` route =======</span>\n\n\n\n<span class=\"token comment\">// Catch all route</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP method doesn't have any effect on this route!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start server</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The magic happens at localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>Add an error middleware, create a file <code>./src/middleware/error-handler.js</code>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorBadJson</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SyntaxError</span> <span class=\"token operator\">&#x26;&#x26;</span> err<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">===</span> <span class=\"token number\">400</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token string\">\"body\"</span> <span class=\"token keyword\">in</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bad request</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  errorBadJson<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>Now in the <code>./src/index.js</code> could look more like\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> errorBadJson <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middleware/error-handler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Middleware</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> errorBadJson <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middleware/error-handler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./users/routes.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>errorBadJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add error handling to all routes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>timeLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Define the `/api/*` routes</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">express<span class=\"token punctuation\">.</span>Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/\"</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Catch all route</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP method doesn't have any effect on this route!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start server</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The magic happens at localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3003</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Securing your Nodejs Application</h1>\n<ol>\n<li>Use HTTPS</li>\n</ol>\n<ul>\n<li><a href=\"https://letsencrypt.org/getting-started/\">LetsEncrypt</a> is free and allows you to generate the SSL certificates for all of your domain/subdomain.</li>\n</ul>\n<ol start=\"2\">\n<li>Data Validation</li>\n</ol>\n<ul>\n<li>\n<p><strong>Never trust the client</strong>, you should <strong>always</strong> validate or sanitize the data coming in</p>\n</li>\n<li>\n<p>Great packages are <code>joi</code> &#x26; <code>validator</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Joi</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"joi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Define the object</span>\n<span class=\"token keyword\">const</span> validateUser <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Joi</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Joi</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alphanum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Joi</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> minDomainSegments<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> tlds<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> allow<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"net\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Joi</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[a-zA-Z0-9]{3,30}$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  repeat_password<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Joi</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validate the object</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> validateRegister<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">validateAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span><span class=\"token string\">\"someone\"</span><span class=\"token punctuation\">,</span> \n  email<span class=\"token operator\">:</span><span class=\"token string\">\"some@one.com\"</span><span class=\"token punctuation\">,</span> \n  password<span class=\"token operator\">:</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">,</span> \n  repeat_password<span class=\"token operator\">:</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> validator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'validator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidator<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some@one.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>SQL Injection</li>\n</ol>\n<ul>\n<li>This kinda ties into the first item, don't trust the data coming in, except here you neve want to use the values coming in without being sanilized/validate as well as never concatenate a string for a SQL query</li>\n<li>The below example someone could pass in <code>Ron\", lastname=\"Burgundy\"; --</code> and add something into your DB\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- THIS IS BAD</span>\n<span class=\"token keyword\">UPDATE</span> users <span class=\"token keyword\">SET</span> firstname<span class=\"token operator\">=</span><span class=\"token string\">\"' + req.body.firstname +  '\"</span> <span class=\"token keyword\">WHERE</span> id<span class=\"token operator\">=</span><span class=\"token string\">'00001'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Malicious</span>\n<span class=\"token keyword\">UPDATE</span> users <span class=\"token keyword\">SET</span> firstname<span class=\"token operator\">=</span><span class=\"token string\">\"Ron\"</span><span class=\"token punctuation\">,</span> lastname<span class=\"token operator\">=</span><span class=\"token string\">\"Burgundy\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--\" WHERE id=00001;</span>\n</code></pre></div>\n</li>\n<li>You can prevent SQL injection by first validating/sanitizing the data coming in, and use escaping methods provided my npm modules\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO users(name, email, password) VALUES ($1, $2, $3)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>You can also used an ORM</li>\n</ul>\n<ol start=\"4\">\n<li>Password hashing</li>\n</ol>\n<ul>\n<li>You should <strong>NEVER</strong> store passwords in plain text in a database</li>\n<li>Use a one-way hashing algorithm</li>\n<li>The output from the hashing function cannot be decrypted hence it's \"one-way\" in nature.</li>\n<li>Hackers could create a <code>lookup table</code> where they hash a huge amount of possible values and try to find one that matches</li>\n<li>You can prevent these kind of attacks by adding <code>salt</code> which is attached to the password hash to make it unique irrespective of the input.</li>\n<li>Salt has to be generated securely and randomly so that it is not predictable.</li>\n<li>BCrypt is a great solution for this\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> saltRounds <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myPlaintextPassword <span class=\"token operator\">=</span> <span class=\"token string\">'s0/\\/\\P4$$w0rD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> someOtherPlaintextPassword <span class=\"token operator\">=</span> <span class=\"token string\">'not_bacon'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hashSync</span><span class=\"token punctuation\">(</span>myPlaintextPassword<span class=\"token punctuation\">,</span> saltRounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Load hash from your password DB.</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">compareSync</span><span class=\"token punctuation\">(</span>myPlaintextPassword<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">compareSync</span><span class=\"token punctuation\">(</span>someOtherPlaintextPassword<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n</li>\n<li>If you are using bcrypt then you can use varchar(60) field because bcrypt will generate fixed size 60 character hashes.</li>\n</ul>\n<ol start=\"5\">\n<li>HTTP Security Headers</li>\n</ol>\n<ul>\n<li>If you are using the Express framework then you can use a module called helmet to enable all security headers with a single line of code.\n<code>js     const express = require(\"express\");      const helmet = require(\"helmet\");       const app = express();      app.use(helmet());       </code></li>\n<li>This enables the following HTTP headers:\n<ul>\n<li>Strict-Transport-Security</li>\n<li>X-frame-Options</li>\n<li>X-XSS-Protection</li>\n<li>X-Content-Type-Protection</li>\n<li>Content-Security-Policy</li>\n<li>Cache-Control</li>\n<li>Expect-CT</li>\n<li>Disable X-Powered-By</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Prevent Bruteforce Attack</li>\n</ol>\n<ul>\n<li>Bruteforce is when a hacker uses software to try different passwords repetitively until they find credentials that match</li>\n<li>To prevent a Bruteforce attack, one of the simplest ways is to wait it out approach.</li>\n<li>When someone is trying to login into your system and tried an invalid password more than 3 times, make them wait for 60 seconds or so before trying again.</li>\n<li>Another approach to preventing it is to ban the IP that is generating invalid login requests. Your system allows 3 wrong attempts per IP in 24 hours.</li>\n<li>If you are using <code>express</code> you can use <code>express-brute</code> middleware\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ExpressBrute</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-brute'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExpressBrute<span class=\"token punctuation\">.</span>MemoryStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stores state locally, don't use this in production</span>\n<span class=\"token keyword\">const</span> bruteforce <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExpressBrute</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth'</span><span class=\"token punctuation\">,</span>\n    bruteforce<span class=\"token punctuation\">.</span><span class=\"token property-access\">prevent</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// error 429 if we hit this route too often</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"7\">\n<li>Implement User Roles</li>\n</ol>\n<ul>\n<li>You should create proper roles and permissions to prevent users from doing things they shouldn't</li>\n<li><code>acl2</code> is a great npm packages, NODE ACL - Access Control Lists for Node\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ACL</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"acl2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> acl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ACL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ACL<span class=\"token punctuation\">.</span>memoryBackend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// guest is allowed to view blogs</span>\nacl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">allow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// check if the permission is granted</span>\nacl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isAllowed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ron\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"view\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User Ron is allowed to view blogs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Logging</h1>\n<ul>\n<li>\n<p>Logs can help us to figure out what happen and when</p>\n</li>\n<li>\n<p>You can write the logging project yourself but the logging problem has already been solved</p>\n</li>\n<li>\n<p>4 great modules to deal with logging are:</p>\n<ul>\n<li>Morgan (HTTP logging middleware)</li>\n<li>Bunyan</li>\n<li>Winston (Log anything)</li>\n<li>Node-Loggly</li>\n</ul>\n</li>\n<li>\n<p>Example with <code>Morgan</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> morgan <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"morgan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a write stream (in append mode)</span>\n<span class=\"token keyword\">const</span> accessLogStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createWriteStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"access.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  flags<span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// setup the logger</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"combined\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> stream<span class=\"token operator\">:</span> accessLogStream <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>Winston</p>\n<ul>\n<li>\n<p>Logging to the console</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> winston <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winston\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Configure the logger</span>\n<span class=\"token keyword\">const</span> logConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the logger</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createLogger</span><span class=\"token punctuation\">(</span>logConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Log an event</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello Winston!\"</span><span class=\"token punctuation\">,</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Log another event</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Winston! This is an info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>Logging to a multiple files</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> winston <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winston\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Configure the logger</span>\n<span class=\"token keyword\">const</span> logConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// prints to the terminal</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      level<span class=\"token operator\">:</span> <span class=\"token string\">\"verbose\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// writes to errors.js (errors)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      level<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/errors.log\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// writes to warn.js (errors|warns)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      level<span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/warn.log\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// writes to debug.js (debug|verbose|info|warns|error)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      level<span class=\"token operator\">:</span> <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/debug.log\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the logger</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createLogger</span><span class=\"token punctuation\">(</span>logConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..verbose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..warn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>If you are using express you can add the logger to the req.logger via a middleware</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// File: ./middleware/logger.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> winston <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"winston\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the log directory if it doesn't exist</span>\n<span class=\"token keyword\">const</span> logDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../logs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>logDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirSync</span><span class=\"token punctuation\">(</span>logDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> filePaths <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  errors<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../logs/errors.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  debug<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../logs/debug.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> logConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// writes to errors.js (errors)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      level<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> filePaths<span class=\"token punctuation\">.</span><span class=\"token property-access\">errors</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// writes to debug.js (debug|verbose|info|warns|error)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      level<span class=\"token operator\">:</span> <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> filePaths<span class=\"token punctuation\">.</span><span class=\"token property-access\">debug</span><span class=\"token punctuation\">,</span>\n      format<span class=\"token operator\">:</span> winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">combine</span><span class=\"token punctuation\">(</span>\n        winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">\"MMM-DD-YYYY HH:mm:ss\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">printf</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> level<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"level\":\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>level<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\", \"timestamp\":\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">[</span>timestamp<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\", \"message\":</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> },</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// req.logger.debug(\"..debug\");</span>\n<span class=\"token comment\">// req.logger.verbose(\"..verbose\");</span>\n<span class=\"token comment\">// req.logger.info(\"..info\");</span>\n<span class=\"token comment\">// req.logger.warn(\"..warn\");</span>\n<span class=\"token comment\">// req.logger.error(\"..error\");</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create the logger</span>\n  <span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createLogger</span><span class=\"token punctuation\">(</span>logConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// For development</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// prints to the terminal</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        level<span class=\"token operator\">:</span> <span class=\"token string\">\"verbose\"</span><span class=\"token punctuation\">,</span>\n        format<span class=\"token operator\">:</span> winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">combine</span><span class=\"token punctuation\">(</span>\n          winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">colorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> <span class=\"token string\">\"MMM-DD-YYYY HH:mm:ss\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          winston<span class=\"token punctuation\">.</span><span class=\"token property-access\">format</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">printf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> level<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>level<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">[</span>timestamp<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token property-access\">logger</span> <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// file: index.js</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>\"<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>middleware<span class=\"token operator\">/</span>logger<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// setup the logger</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token property-access\">logger</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world was hit!\"</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>What should you log??</p>\n<ul>\n<li>There is no general standard, however some common logging levels used in JS\n<ul>\n<li><code>error</code> &#x26; <code>warn</code></li>\n<li><code>info</code> &#x26; <code>log</code></li>\n<li><code>verbose</code> &#x26; <code>debug</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>JWT (JSON Web Tokens)</h1>\n<p>https://auth0.com/docs/tokens/json-web-tokens/json-web-token-claims#reserved-claims</p>\n<ol start=\"6\">\n<li>Create release notes for every update</li>\n</ol>\n<h1>JS Doc</h1>\n<ul>\n<li>There are alot of ways to document your code; README, tutorials, documentation file, etc</li>\n<li>The problem with the one above is they get out of date quickly, it's best to put your documentaion as close to the code so that you can update it as you up update the functionality.</li>\n<li>JSDoc is perfect for this kinda documentation layer, plus if you are using vscode it will give you intellesence!</li>\n</ul>\n<ol>\n<li>Start with a code block</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Takes in to numbers and will add them</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item1<span class=\"token punctuation\">,</span> item2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> item1 <span class=\"token operator\">+</span> item2\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> addItems\n</code></pre></div>\n<ol start=\"2\">\n<li>Add a description of what it does</li>\n</ol>\n<ul>\n<li>The function name should give it away but it gives you a chance to descript it with words)\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Takes in to numbers and will add them</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item1<span class=\"token punctuation\">,</span> item2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> item1 <span class=\"token operator\">+</span> item2\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> addItems\n</code></pre></div>\n</li>\n<li><img src=\"plublic/assets/blog/jsdoc-description-only.jpg\" alt=\"jsdoc-description-only\"></li>\n</ul>\n<ol start=\"2\">\n<li>Now describe the params and the return</li>\n</ol>\n<ul>\n<li>Here is what the format looks like\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n*\n* <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>param <span class=\"token keyword\">type</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">param</span> name - description\n*\n*/</span>\n</code></pre></div>\n</li>\n<li>Now let's add those\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Takes in to numbers and will add them\n *\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">item1</span> - First number\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">item2</span> - Second number\n * <span class=\"token keyword\">@returns</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> Sum of the 2 numbers\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item1<span class=\"token punctuation\">,</span> item2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> item1 <span class=\"token operator\">+</span> item2\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> addItems\n</code></pre></div>\n</li>\n<li><img src=\"plublic/assets/blog/jsdoc-complete.jpg\" alt=\"jsdoc-complete\"></li>\n</ul>\n<ol start=\"3\">\n<li>Use the function</li>\n</ol>\n<ul>\n<li>\n<p>As you start to type in the parameter it will tell you the data type</p>\n</li>\n<li>\n<p><img src=\"plublic/assets/blog/jsdoc-using.jpg\" alt=\"jsdoc-using\"></p>\n</li>\n<li>\n<p>Example of JSDoc</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * Raises a number to exponent\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">value</span> - The base to raise\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">exponent</span> - The exponent\n * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> - The exponent power\n */</span>\n\n <span class=\"token doc-comment comment\">/**\n * A silly logger function\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">message</span>\n * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">}</span></span> Nothing\n */</span>\n\n\n <span class=\"token doc-comment comment\">/**\n * Generates a table head\n * <span class=\"token keyword\">@author</span> Valentino Gagliardi &#x3C;valentinoDOTvalentinog.com>\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>HTMLTableElement<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">table</span> - The target HTML table\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Array<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">data</span> - The array of cell header names\n */</span>\n</code></pre></div>\n</li>\n<li>\n<p>Generate docs</p>\n<ul>\n<li>You can use the <code>jsdoc</code> to generate documentation for all your functions</li>\n<li><em>Note</em> if you use <code>export default function yourFunctionName()</code> it won't create it you have to define it with just <code>function yourFunctionName()</code> then export it on another line <code>export default yourFunctionName</code></li>\n<li>Add the <code>jsdoc</code> package to your repo\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> docs\n$ <span class=\"token function\">npm</span> i -D jsdoc\n</code></pre></div>\n</li>\n<li>update your <code>package.json</code> file\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"make:docs\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"jsdoc -d documentation src/*.js \"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n</li>\n<li>now run the doc generator\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> run make:docs\n$ <span class=\"token builtin class-name\">cd</span> documentation\n$ npx live-server\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n","ogImage":{"url":"/assets/covers/nodejs.jpg"},"coverImage":"/assets/covers/nodejs.jpg"}},"__N_SSG":true}