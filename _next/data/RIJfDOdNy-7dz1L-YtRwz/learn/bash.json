{"pageProps":{"post":{"title":"bash","slug":"bash","content":"<h1>Overview of bash</h1>\n<ul>\n<li>Bash is the shell, or command language interpreter, for the GNU operating system.</li>\n<li>The name is an acronym for the ‘Bourne-Again SHell’, a pun on Stephen Bourne, the author of the direct ancestor of the current Unix shell sh, which appeared in the Seventh Edition Bell Labs Research version of Unix.</li>\n</ul>\n<h2>Bash tips</h2>\n<ul>\n<li>Create a new directory or folder\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> <span class=\"token operator\">&#x3C;</span>directory_name<span class=\"token operator\">></span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$_</span>\n\n<span class=\"token comment\"># For oh-my-zsh users:</span>\n$ take <span class=\"token operator\">&#x3C;</span>directory_name<span class=\"token operator\">></span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Set Environment Variables in Your Bash Shell From a <code>.env</code> File</h1>\n<ul>\n<li>\n<p>The <code>.env</code> file is used to pass in environment variables to a script</p>\n</li>\n<li>\n<p>Environment variables allow us to manage the configuration of our applications separately from our codebase.</p>\n</li>\n<li>\n<p>Separating configurations makes it easier for our application to be deployed in different environments.</p>\n</li>\n<li>\n<p>Environment variables are variables external to our application which reside in the OS or the container where the production application is running.</p>\n</li>\n<li>\n<p>Because development is mostly done on local machines, environment variables are put either to local environment variables with commands such as set or export, or stored in the local .env file.</p>\n</li>\n<li>\n<p>General rules with <code>.env</code> file</p>\n<ol>\n<li>List environment variables on single line with <code>&#x3C;KEY>=&#x3C;VALUE></code> format</li>\n<li>Comments <code>#</code> needs to be the first character on the line <strong>NOT</strong> after a key/value definition  <em>NOT THIS</em> -> <code>HOST=\"localhost\" # for local development (do not add comments after the key/value definition)</code></li>\n<li>Empty lines are skipped</li>\n<li>inner quotes are maintainted</li>\n</ol>\n</li>\n<li>\n<p><code>.env</code> example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">HOST <span class=\"token operator\">=</span> localhost\nDATABASE <span class=\"token operator\">=</span> ydb\nPORT <span class=\"token operator\">=</span> <span class=\"token number\">5432</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">HOST</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span>\n<span class=\"token assign-left variable\">DATABASE</span><span class=\"token operator\">=</span><span class=\"token string\">\"ydb\"</span>\n<span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">5432</span>\n</code></pre></div>\n</li>\n<li>\n<p>You can load all the environment variables from a file</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Show env vars</span>\n<span class=\"token function\">grep</span> -v <span class=\"token string\">'^#'</span> .env\n\n<span class=\"token comment\"># Export env vars</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> -v <span class=\"token string\">'^#'</span> .env <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span><span class=\"token variable\">)</span></span>\n</code></pre></div>\n</li>\n<li>\n<p>Only load them if the file exist</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f .env <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">export</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> .env <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n</code></pre></div>\n</li>\n<li>\n<p>Allow for comment lines</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f .env <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">export</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> .env <span class=\"token operator\">|</span> <span class=\"token function\">egrep</span> -v <span class=\"token string\">\"(^#.*|^$)\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n</code></pre></div>\n</li>\n<li>\n<p>Loading <code>.env</code> in an JavaScript file with the <code>dotenv</code> package</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOST</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> database <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Kill process running on a port number</h1>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Find:</span>\n$ <span class=\"token function\">lsof</span> -i :3000\n\n<span class=\"token comment\"># Kill:</span>\n$ <span class=\"token function\">kill</span> -9 <span class=\"token operator\">&#x3C;</span>PID<span class=\"token operator\">></span>\n</code></pre></div>\n<h1>Change the extension of all files in a directory</h1>\n<ul>\n<li>Change all <code>*.jsx</code> to <code>*.tsx</code>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">f</span> <span class=\"token keyword\">in</span> *.jsx<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">mv</span> -- <span class=\"token string\">\"<span class=\"token variable\">$f</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${f<span class=\"token operator\">%</span>.jsx}</span>.tsx\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Terminal Colors</h1>\n<ul>\n<li>Set/Reset\n<div class=\"remark-highlight\"><pre class=\"language-basic\"><code class=\"language-basic\"><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>remove all modifier<span class=\"token punctuation\">,</span> foreground <span class=\"token operator\">and</span> background attributes<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"\\e[<span class=\"token number\">0</span>mNormal <span class=\"token function\">Text</span>\"\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> Bold<span class=\"token operator\">/</span>Bright<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">1</span>mBold\"\n<span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">Dim</span><span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">2</span>mDim\"\n<span class=\"token number\">4</span><span class=\"token punctuation\">:</span> Underlined<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">4</span>mUnderlined\"\n<span class=\"token number\">5</span><span class=\"token punctuation\">:</span> Blink <span class=\"token punctuation\">(</span>doesn't work <span class=\"token function\">in</span> most terminals except XTerm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">5</span>mBlink\"\n<span class=\"token number\">7</span><span class=\"token punctuation\">:</span> Reverse<span class=\"token operator\">/</span>Invert<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">7</span>minverted\"\n<span class=\"token number\">8</span><span class=\"token punctuation\">:</span> Hidden <span class=\"token punctuation\">(</span>useful <span class=\"token keyword\">for</span> sensitive info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">8</span>mHidden <span class=\"token keyword\">Input</span>\"\n<span class=\"token number\">21</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>Remove bold<span class=\"token operator\">/</span>bright<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">1</span>mBold \\e[<span class=\"token number\">21</span>mNormal\"\n<span class=\"token number\">22</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>Remove <span class=\"token keyword\">dim</span><span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">2</span>mDim \\e[<span class=\"token number\">22</span>mNormal\"\n<span class=\"token number\">24</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>Remove underline<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">4</span>mUnderlined \\e[<span class=\"token number\">24</span>mNormal\"\n<span class=\"token number\">25</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>Remove blink<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">5</span>mBlink \\e[<span class=\"token number\">25</span>mNormal\"\n<span class=\"token number\">27</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>Remove reverse<span class=\"token operator\">/</span>invert<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">7</span>minverted \\e[<span class=\"token number\">27</span>mNormal\"\n<span class=\"token number\">28</span><span class=\"token punctuation\">:</span> Reset<span class=\"token operator\">/</span>Remove hidden<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Normal \\e[<span class=\"token number\">8</span>mHidden \\e[<span class=\"token number\">28</span>mNormal\"\n</code></pre></div>\n</li>\n<li>Foreground\n<div class=\"remark-highlight\"><pre class=\"language-basic\"><code class=\"language-basic\"><span class=\"token number\">39</span><span class=\"token punctuation\">:</span> Default <span class=\"token punctuation\">(</span>usually green<span class=\"token punctuation\">,</span> white <span class=\"token operator\">or</span> light gray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Default \\e[<span class=\"token number\">39</span>mDefault\"\n<span class=\"token number\">30</span><span class=\"token punctuation\">:</span> Black<span class=\"token punctuation\">:</span> echo <span class=\"token operator\">-</span>e \"Default \\e[<span class=\"token number\">30</span>mBlack<span class=\"token string\">\" (best combined with a background colour: echo -e \"</span>Default \\e[<span class=\"token number\">30</span><span class=\"token punctuation\">;</span><span class=\"token number\">107</span>mBlack <span class=\"token keyword\">on</span> white\"<span class=\"token punctuation\">)</span>\n<span class=\"token number\">31</span><span class=\"token punctuation\">:</span> Red <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> green background<span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span><span class=\"token punctuation\">:</span> Green\n<span class=\"token number\">33</span><span class=\"token punctuation\">:</span> Yellow\n<span class=\"token number\">34</span><span class=\"token punctuation\">:</span> Blue\n<span class=\"token number\">35</span><span class=\"token punctuation\">:</span> Magenta<span class=\"token operator\">/</span>Purple\n<span class=\"token number\">36</span><span class=\"token punctuation\">:</span> Cyan\n<span class=\"token number\">37</span><span class=\"token punctuation\">:</span> Light Gray\n<span class=\"token number\">90</span><span class=\"token punctuation\">:</span> Dark Gray\n<span class=\"token number\">91</span><span class=\"token punctuation\">:</span> Light Red\n<span class=\"token number\">92</span><span class=\"token punctuation\">:</span> Light Green\n<span class=\"token number\">93</span><span class=\"token punctuation\">:</span> Light Yellow\n<span class=\"token number\">94</span><span class=\"token punctuation\">:</span> Light Blue\n<span class=\"token number\">95</span><span class=\"token punctuation\">:</span> Light Magenta<span class=\"token operator\">/</span>Pink\n<span class=\"token number\">96</span><span class=\"token punctuation\">:</span> Light Cyan\n<span class=\"token number\">97</span><span class=\"token punctuation\">:</span> White\n</code></pre></div>\n</li>\n<li>Background\n<div class=\"remark-highlight\"><pre class=\"language-basic\"><code class=\"language-basic\"><span class=\"token number\">49</span><span class=\"token punctuation\">:</span> Default background <span class=\"token function\">color</span> <span class=\"token punctuation\">(</span>usually black <span class=\"token operator\">or</span> blue<span class=\"token punctuation\">)</span>\n<span class=\"token number\">40</span><span class=\"token punctuation\">:</span> Black\n<span class=\"token number\">41</span><span class=\"token punctuation\">:</span> Red\n<span class=\"token number\">42</span><span class=\"token punctuation\">:</span> Green\n<span class=\"token number\">43</span><span class=\"token punctuation\">:</span> Yellow\n<span class=\"token number\">44</span><span class=\"token punctuation\">:</span> Blue\n<span class=\"token number\">45</span><span class=\"token punctuation\">:</span> Magenta<span class=\"token operator\">/</span>Purple\n<span class=\"token number\">46</span><span class=\"token punctuation\">:</span> Cyan\n<span class=\"token number\">47</span><span class=\"token punctuation\">:</span> Light Gray <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> white foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">100</span><span class=\"token punctuation\">:</span> Dark Gray <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> black foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">101</span><span class=\"token punctuation\">:</span> Light Red\n<span class=\"token number\">102</span><span class=\"token punctuation\">:</span> Light Green <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> white foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">103</span><span class=\"token punctuation\">:</span> Light Yellow <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> white foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">104</span><span class=\"token punctuation\">:</span> Light Blue <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> light yellow foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">105</span><span class=\"token punctuation\">:</span> Light Magenta<span class=\"token operator\">/</span>Pink <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> light foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">106</span><span class=\"token punctuation\">:</span> Light Cyan <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> white foreground<span class=\"token punctuation\">)</span>\n<span class=\"token number\">107</span><span class=\"token punctuation\">:</span> White <span class=\"token punctuation\">(</span>don't <span class=\"token function\">use</span> <span class=\"token function\">with</span> light foreground<span class=\"token punctuation\">)</span>\n</code></pre></div>\n</li>\n<li>Example\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Colors</span>\n<span class=\"token assign-left variable\">Red</span><span class=\"token operator\">=</span><span class=\"token string\">$'<span title=\"\\e\" class=\"token entity\">\\e</span>[1;41m'</span>\n<span class=\"token assign-left variable\">Green</span><span class=\"token operator\">=</span><span class=\"token string\">$'<span title=\"\\e\" class=\"token entity\">\\e</span>[1;42m'</span>\n<span class=\"token assign-left variable\">Blue</span><span class=\"token operator\">=</span><span class=\"token string\">$'<span title=\"\\e\" class=\"token entity\">\\e</span>[1;34m'</span>\n<span class=\"token assign-left variable\">clear_color</span><span class=\"token operator\">=</span><span class=\"token string\">$'<span title=\"\\e\" class=\"token entity\">\\e</span>[1;49m'</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" <span class=\"token variable\">$Blue</span>[this should be blue] <span class=\"token variable\">$clear_color</span> this should be default color\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" <span class=\"token variable\">$Red</span>[this should be red] <span class=\"token variable\">$clear_color</span> this should be default color\"</span>\n</code></pre></div>\n</li>\n</ul>\n<h1>Rename file extensions</h1>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># replace all the `.txt` to `text`</span>\n$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> *.txt<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${file<span class=\"token operator\">%</span>.txt}</span>.text\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># Want to rename all nested folders</span>\n$ <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> **/*.jsx<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${file<span class=\"token operator\">%</span>.jsx}</span>.tsx\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n</code></pre></div>\n<h1><code>jq</code> for parsing JSON data</h1>\n<ul>\n<li><code>jq</code>is a lightweight and flexible command-line JSON processor.</li>\n<li><a href=\"https://stedolan.github.io/jq/\">js</a></li>\n<li>jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.</li>\n<li>It allows you to run a command in the terminal and that the JSON result and parse in inline</li>\n<li>It's designed of the terminal but you can also use it in nodejs <code>$ npm i node-jq</code></li>\n<li><a href=\"https://jqplay.org/\">playground</a></li>\n</ul>\n<h2>How to filter</h2>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># read a file</span>\n$ jq <span class=\"token string\">'.'</span> package.json\n\n<span class=\"token comment\"># Get the value of a string</span>\n$ jq <span class=\"token string\">'.name'</span> package.json\n\n<span class=\"token comment\"># Get an object</span>\n$ jq <span class=\"token string\">'.scripts'</span> client/input.json\n$ jq <span class=\"token string\">'.scripts + {\"hello\": \"jq\"}'</span> client/input.json               <span class=\"token comment\"># add a new key/value to an object</span>\n$ jq <span class=\"token string\">'.scripts | del(.scripts.test)'</span> client/input.json            <span class=\"token comment\"># remove a new key/value to an object</span>\n$ jq <span class=\"token string\">'.scripts.start = \"webpack-dev-server\"'</span> client/input.json    <span class=\"token comment\"># Update</span>\n$ jq <span class=\"token string\">'del(.scripts.test)'</span> client/input.json                       <span class=\"token comment\"># Delete a key/value</span>\n$ jq <span class=\"token string\">'.scripts.start = \"webpack-dev-server\" | del(.scripts.test)'</span> client/input.json   <span class=\"token comment\"># Update &#x26; Delete </span>\n\n<span class=\"token comment\"># Get an array</span>\n$ jq <span class=\"token string\">'.browserslist.production'</span> client/input.json       <span class=\"token comment\"># prints an array</span>\n$ jq <span class=\"token string\">'.browserslist.production[]'</span> client/input.json     <span class=\"token comment\"># returns each element in the array</span>\n$ jq <span class=\"token string\">'.browserslist.production[0]'</span> client/input.json    <span class=\"token comment\"># get first item in the array</span>\n$ jq <span class=\"token string\">'.browserslist.production[1:2]'</span> client/input.json  <span class=\"token comment\"># slice</span>\n\n$ jq <span class=\"token string\">'.browserslist.production[] + \"SOMETHING NEW\"'</span> client/input.json   <span class=\"token comment\"># add something to each item in array</span>\n$ jq <span class=\"token string\">'[\"SOMETHING NEW\"] + .browserslist.production '</span> client/input.json  <span class=\"token comment\"># Add to beginging</span>\n$ jq <span class=\"token string\">'.browserslist.production + [\"SOMETHING NEW\"]'</span> client/input.json   <span class=\"token comment\"># Add to end</span>\n$ jq <span class=\"token string\">'.browserslist.production[0] = \"yessss\"'</span> client/input.json         <span class=\"token comment\"># Update</span>\n$ jq <span class=\"token string\">'del(.browserslist.production[0])'</span> client/input.json               <span class=\"token comment\"># Delete</span>\n$ jq <span class=\"token string\">'.browserslist.production[] | '</span> client/input.json  \n\n<span class=\"token comment\"># Update</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq <span class=\"token string\">'.scripts.dev=\"tsc -w &#x26;&#x26; nodemon dist\"'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n</code></pre></div>\n<h2>Update a JSON file</h2>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq <span class=\"token string\">'.scripts.serve=\"node dist/index.js\"'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n$ <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"node dist/index.js\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.serve=$newVal'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n</code></pre></div>\n<h2>Loop thru array</h2>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">sample</span><span class=\"token operator\">=</span><span class=\"token string\">'[{\"name\":\"foo\"},{\"name\":\"bar\"}]'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${sample}</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">'.'</span>\n</code></pre></div>\n<h2>Regular expressions (PCRE)</h2>\n<p>test(val)\nmatch(val)\ncapture(val)\nscan(val)\nscan(regex)\nsplit(regex; flags)\nsub(regex; tostring)\nsub(\"&#x3C;LOOKING_FOR>\", \"&#x3C;REPLACE_WITH>\")</p>\n<h2>Output in a single line</h2>\n<ul>\n<li>To get outputs from jq on a single line use the <code>-c</code> flag\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">jq -c <span class=\"token builtin class-name\">.</span> input\n</code></pre></div>\n</li>\n</ul>\n<h2>Raw Output</h2>\n<ul>\n<li>This allows you to not have wrapped quotes around the result\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">jq -r <span class=\"token builtin class-name\">.</span> input\n</code></pre></div>\n</li>\n</ul>\n<h2>AWS-CLI and JQ</h2>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ aws route53 list-hosted-zones <span class=\"token operator\">|</span> jq <span class=\"token string\">'.[]'</span>\n$ aws route53 list-hosted-zones <span class=\"token operator\">|</span> jq <span class=\"token string\">'.HostedZones[]'</span>\n$ aws route53 list-hosted-zones <span class=\"token operator\">|</span> jq <span class=\"token string\">'.HostedZones[].Name'</span>\n$ aws route53 list-hosted-zones <span class=\"token operator\">|</span> jq <span class=\"token string\">'.HostedZones[] | select(.Name == \"someawesomesite.com.\") | .Id '</span> \n$ aws route53 list-hosted-zones <span class=\"token operator\">|</span> jq <span class=\"token string\">'.HostedZones[] | select(.Name == \"someawesomesite.com.\") | .Id | sub(\"/hostedzone/\";\"\") '</span>\n\n$ <span class=\"token assign-left variable\">hz</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws route53 list-hosted-zones <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.HostedZones[] | select(.Name == \"someawesomesite.com.\") | .Id | sub(\"/hostedzone/\";\"\") '</span><span class=\"token variable\">)</span></span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Getting info on <span class=\"token variable\">$hz</span>\"</span>\n$ aws route53 get-hosted-zone --id <span class=\"token variable\">$hz</span>\n</code></pre></div>\n<h1>npm's <code>ZX</code> to create JS script</h1>\n<ul>\n<li>The <code>ZX</code> package provides useful wrappers around <code>child_process</code>, escapes arguments and gives sensible defaults.</li>\n<li>What this nodejs package actually do is it allows you to right scripts in JS and use bash sprinkled into it</li>\n</ul>\n<h2>Get started</h2>\n<ol start=\"0\">\n<li>\n<p>Install\n$ npm i -g zx</p>\n</li>\n<li>\n<p>Add the following shebang to the beginning of your zx scripts:</p>\n</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token hashbang comment\">#!/usr/bin/env zx</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>How to run the script</li>\n</ol>\n<ul>\n<li>Run it like a regular bash script\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">chmod</span> +x ./script.mjs\n$ ./script.mjs\n</code></pre></div>\n</li>\n<li>Or\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ zx ./script.mjs\n</code></pre></div>\n</li>\n</ul>\n<ol start=\"3\">\n<li>How to write commands</li>\n</ol>\n<ul>\n<li>All functions ($, cd, fetch, question, sleep, etc) are available straight away without any imports.</li>\n<li>Also includes (chalk, fs, os) without any imports.\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">$<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">command</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n</li>\n</ul>\n<h2>Working with ZX</h2>\n<h3>Run bash command</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pwd</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword control-flow\">await</span> $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cat package.json | grep name</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>\n<h3>You can use chalk</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>chalk<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">blue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'homedir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">homedir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>JS promises</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sleep 1; echo 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sleep 2; echo 2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  $<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sleep 3; echo 3</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>fetch from a URL</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> spaceXUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.spacexdata.com/v4/launches/latest'</span>\n<span class=\"token keyword\">let</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>spaceXUrl<span class=\"token punctuation\">)</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span><span class=\"token property-access\">ok</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> resp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Ask questions</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> shoes <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whats your favorite Nike shoe? '</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Choose env variable: '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">choices</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>shoes<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h1>Create a global <code>node init</code> bash script</h1>\n<ul>\n<li>It get a little tedious to scafold out a quick node application</li>\n<li>Create a file in <code>~/.zsh/nodejs.zsh</code>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># NVM</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.nvm\"</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"token comment\"># This loads nvm</span>\n\n<span class=\"token comment\"># Node Environment</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NODE_ENV</span><span class=\"token operator\">=</span>development\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">npmlsg</span><span class=\"token operator\">=</span><span class=\"token string\">'npm list -g --depth=0'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">npmlsl</span><span class=\"token operator\">=</span><span class=\"token string\">'npm list -g --depth=0 --link=true'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">npmis</span><span class=\"token operator\">=</span><span class=\"token string\">\"npm i &#x26;&#x26; npm start\"</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">cra</span><span class=\"token operator\">=</span><span class=\"token string\">\"npx create-react-app \"</span>\n\n<span class=\"token comment\"># Scaffold a nodejs module with esm format</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">init-nodejs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\"># Git</span>\n  <span class=\"token function\">git</span> init\n  <span class=\"token function\">git</span> branch -m main default\n\n  <span class=\"token comment\"># Node configuration &#x26; packages</span>\n  <span class=\"token function\">npm</span> init -y\n  <span class=\"token function\">npm</span> i -D @babel/node@7 @babel/preset-env@7 @babel/cli@7 @babel/core@7\n  <span class=\"token function\">npm</span> i -D prettier eslint eslint-config-prettier eslint-plugin-prettier\n\n  <span class=\"token comment\"># Create files and folders</span>\n  makeNodejsRCFiles\n  makeSampleNodeFile\n\n  <span class=\"token comment\"># Update the `packages.json` file</span>\n  <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"npx nodemon --exec babel-node src/index.js\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.start=$newVal'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n  <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"babel src --out-dir dist\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.build=$newVal'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n  <span class=\"token assign-left variable\">newVal</span><span class=\"token operator\">=</span><span class=\"token string\">\"node dist/index.js\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span>jq --arg newVal <span class=\"token string\">\"<span class=\"token variable\">$newVal</span>\"</span>  <span class=\"token string\">'.scripts.serve=$newVal'</span> package.json<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">></span> package.json\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">makeNodejsRCFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Create `.gitignore` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .gitignore</span>\nnode_modules\ndist\n.env\nEOT</span>\n\n  <span class=\"token comment\"># Create `.prettierrc` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .prettierrc</span>\n{\n  \"semi\": false,\n  \"trailingComma\": \"all\",\n  \"singleQuote\": true,\n  \"printWidth\": 100\n}\nEOT</span>\n\n  <span class=\"token comment\"># Create `.babelrc` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .babelrc</span>\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"esmodules\": true\n        }\n      }\n    ]\n  ]\n}\nEOT</span>\n\n  <span class=\"token comment\"># Create `.eslintrc` files</span>\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .eslintrc</span>\n{\n  \"env\": {\n    \"commonjs\": true,\n    \"es6\": true,\n    \"node\": true\n  },\n  \"extends\": [ \"prettier\", \"plugin:node/recommended\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2018\n  },\n  \"plugins\": [\"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": \"error\",\n    \"no-unused-vars\": \"warn\",\n    \"no-console\": \"off\",\n    \"func-names\": \"off\",\n    \"no-process-exit\": \"off\",\n    \"class-methods-use-this\": \"off\"\n  }\n}\nEOT</span>\n\n  <span class=\"token comment\"># Create `.vscode/settings.json` files</span>\n  <span class=\"token function\">mkdir</span> .vscode\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .vscode/settings.json</span>\n{\n  // Set prettier to be the default formatter\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\n  // Don't format any files by default\n  \"editor.formatOnSave\": false,\n\n  // Define the file types to do the autoformatting\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n  }\n}\nEOT</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">makeSampleNodeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mkdir</span> src\n  <span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'EOT'<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> src/index.js</span>\nimport crypto from 'crypto'\n\nconst password = '123456789'\nconst key = crypto.scryptSync(password, 'GfG', 24)\nconsole.log(key)\nEOT</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>Now you can create a new npm node\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token function\">mkdir</span> some-new-dir <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token variable\">$_</span>\n$ init-nodejs\n</code></pre></div>\n</li>\n</ul>\n<h1>MacOS</h1>\n<h2>Disk Utility does not show APFS format?</h2>\n<ul>\n<li>Try switching \"View\" in the top left corner of Disk Utility to \"Show All Devices\" and try again.</li>\n</ul>\n","ogImage":{"url":"/assets/covers/bash.jpg"},"coverImage":"/assets/covers/bash.jpg"}},"__N_SSG":true}